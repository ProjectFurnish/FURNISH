[{"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\index.js":"1","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\App.js":"2","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\reportWebVitals.js":"3","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Header\\Header.js":"4","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\SignUp\\SignUpClient.js":"5","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\LoginSign\\LoginSign.js":"6","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Home\\Home.js":"7","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Payment\\Payment.js":"8","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\InputForm\\Validation.js":"9","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\SignAccount\\SignAccount.js":"10","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ShippingDetails\\ShippingDetails.js":"11","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ProductDetails\\ProductDetails.js":"12","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\PersonalArea\\PersonalArea.js":"13","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\About\\About.js":"14","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\UpdateUser\\UpdateUser.js":"15","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\NotFound\\NotFound.js":"16","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\CategoryProductB\\CategoryProductB.js":"17","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Message\\Message.js":"18","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\InputForm\\InputForm.js":"19","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Cart\\Cart.js":"20","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\UserAccount\\UserAccount.js":"21","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Shared\\UsesFunction.js":"22","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Login\\Login.js":"23","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Seller\\Seller.js":"24","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Client\\Client.js":"25","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Paypal\\Paypal.js":"26","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Furniture\\Furinture.js":"27","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Filter\\FilterB.js":"28","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ProductsList\\ProductsList.js":"29","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Paging\\Paging.js":"30","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Product\\Product.js":"31","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Product\\ProductBig\\ProductBig.js":"32"},{"size":555,"mtime":1652562407703,"results":"33","hashOfConfig":"34"},{"size":7137,"mtime":1652562407624,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1652562407703,"results":"36","hashOfConfig":"34"},{"size":7874,"mtime":1652562407671,"results":"37","hashOfConfig":"34"},{"size":8944,"mtime":1652562407703,"results":"38","hashOfConfig":"34"},{"size":720,"mtime":1652562407671,"results":"39","hashOfConfig":"34"},{"size":4551,"mtime":1652562407671,"results":"40","hashOfConfig":"34"},{"size":10499,"mtime":1652562407687,"results":"41","hashOfConfig":"34"},{"size":4513,"mtime":1652562407671,"results":"42","hashOfConfig":"34"},{"size":5249,"mtime":1652562407703,"results":"43","hashOfConfig":"34"},{"size":8771,"mtime":1652562407703,"results":"44","hashOfConfig":"34"},{"size":16705,"mtime":1652562407687,"results":"45","hashOfConfig":"34"},{"size":2002,"mtime":1652562407687,"results":"46","hashOfConfig":"34"},{"size":18900,"mtime":1652562407656,"results":"47","hashOfConfig":"34"},{"size":865,"mtime":1652562407703,"results":"48","hashOfConfig":"34"},{"size":356,"mtime":1652562407687,"results":"49","hashOfConfig":"34"},{"size":4555,"mtime":1652562407656,"results":"50","hashOfConfig":"34"},{"size":1192,"mtime":1652562407687,"results":"51","hashOfConfig":"34"},{"size":2781,"mtime":1652562407671,"results":"52","hashOfConfig":"34"},{"size":4106,"mtime":1652562407656,"results":"53","hashOfConfig":"34"},{"size":2854,"mtime":1652562407703,"results":"54","hashOfConfig":"34"},{"size":83,"mtime":1652562407703,"results":"55","hashOfConfig":"34"},{"size":6987,"mtime":1652562407671,"results":"56","hashOfConfig":"34"},{"size":5968,"mtime":1652562407703,"results":"57","hashOfConfig":"34"},{"size":3844,"mtime":1652562407671,"results":"58","hashOfConfig":"34"},{"size":2738,"mtime":1652562407687,"results":"59","hashOfConfig":"34"},{"size":3245,"mtime":1652562407656,"results":"60","hashOfConfig":"34"},{"size":6645,"mtime":1652562407656,"results":"61","hashOfConfig":"34"},{"size":2763,"mtime":1652562407687,"results":"62","hashOfConfig":"34"},{"size":680,"mtime":1652562407671,"results":"63","hashOfConfig":"34"},{"size":4669,"mtime":1652562407687,"results":"64","hashOfConfig":"34"},{"size":8357,"mtime":1652562407687,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"3oxb4y",{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"68"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\index.js",[],["149","150"],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\App.js",["151","152","153"],"\r\nimport './App.css';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport LoginSign from './components/LoginSign/LoginSign'\r\nimport SignUpClient from './components/SignUp/SignUpClient'\r\nimport Header from './components/Header/Header'\r\nimport Home from './components/Home/Home'\r\nimport { validId } from './components/InputForm/Validation'\r\nimport CategoryProductB from './components/CategoryProduct/CategoryProductB/CategoryProductB'\r\nimport Payment from './components/Payment/Payment'\r\nimport ShippingDetails from './components/ShippingDetails/ShippingDetails'\r\nimport SignAccount from './components/SignAccount/SignAccount'\r\nimport ProductDetails from './components/ProductDetails/ProductDetails'\r\nimport PersonalArea from './components/PersonalArea/PersonalArea'\r\nimport About from './components/About/About'\r\nimport UpdateUser from './components/UpdateUser/UpdateUser'\r\nimport NotFound from './components/NotFound/NotFound'\r\n\r\nfunction App() {\r\n\r\n  const [userNow, setUserNow] = useState({\r\n    id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    city: \"\",\r\n    password: \"\",\r\n    bankNumber: \"\",\r\n    bankAccount: \"\",\r\n    branchNumber: \"\",\r\n    address: \"\",\r\n    buildingNumber: \"\",\r\n    homeNumber: \"\",\r\n    cityDel: \"\"\r\n  });\r\n  const [url, setUrl] = useState(window.location.pathname);\r\n  const [isShabbos, setIsShabbos] = useState(false);\r\n\r\n  useEffect(async () => {\r\n    if (localStorage.getItem(\"idUserNow\") !== null && validId(localStorage.getItem(\"idUserNow\")) === \"\") {\r\n      let response = await fetch('http://localhost:27017/users/getUser/' + localStorage.getItem(\"idUserNow\"), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (response.status == 200) {\r\n        let userNow = await response.json();\r\n        setUserNow(userNow);\r\n      }\r\n\r\n    }\r\n    chaeckIsShabbos();\r\n  }, [])\r\n\r\n  function changeUser(newUser) {\r\n    setUserNow(newUser);\r\n    localStorage.setItem(\"idUserNow\", newUser.id);\r\n  }\r\n\r\n  function chaeckIsShabbos() {\r\n    let date = new Date();\r\n    let day = date.getDay();\r\n    let hour = date.getHours();\r\n    if ((day === 5 && hour > 19) || (day === 6 && hour < 20)) setIsShabbos(true);\r\n    else setIsShabbos(false);\r\n    return;\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      {!isShabbos &&\r\n        <div>\r\n          <Header userNow={userNow} url={url} setUrl={\r\n            (url) => {\r\n              setUrl(url);\r\n            }\r\n          } changeUser={\r\n            (newUser) => { changeUser(newUser); }}\r\n          />\r\n          <Switch>\r\n            <Route\r\n              exact path='/'\r\n              render={(props) => (<Home {...props}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)}\r\n            />\r\n            <Route\r\n              path='/closet'\r\n              render={(props) => (<CategoryProductB {...props}\r\n                category=\"ארונות\"\r\n                userNow={userNow}\r\n              />)} />\r\n            <Route\r\n              path='/table'\r\n              render={(props) => (<CategoryProductB {...props}\r\n                category=\"שולחנות\"\r\n                userNow={userNow}\r\n              />)} />\r\n            <Route\r\n              path='/bed'\r\n              render={(props) => (<CategoryProductB {...props}\r\n                category=\"מיטות\"\r\n                userNow={userNow}\r\n\r\n              />)} />\r\n\r\n            <Route\r\n              path='/sofa'\r\n              render={(props) => (<CategoryProductB {...props}\r\n                category=\"ספות\"\r\n                userNow={userNow}\r\n\r\n              />)} />\r\n            <Route\r\n              path='/chair'\r\n              render={(props) => (<CategoryProductB {...props}\r\n                category=\"כיסאות\"\r\n                userNow={userNow}\r\n\r\n              />)} />\r\n            <Route\r\n              path='/SignUpClient'\r\n              render={(props) => (<SignUpClient {...props}\r\n                changeUser={(newUser) => { changeUser(newUser); }}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)}\r\n\r\n            />\r\n            <Route\r\n              path='/UpdateUser'\r\n              render={(props) => (<UpdateUser {...props}\r\n                changeUser={(newUser) => { changeUser(newUser); }}\r\n                setUrl={(url) => { setUrl(url); }}\r\n                userNow={userNow} />)}\r\n\r\n            />\r\n            <Route\r\n              path='/LoginSign'\r\n              render={(props) => (<LoginSign {...props}\r\n                changeUser={(newUser) => { changeUser(newUser); }}\r\n                setUrl={(url) => { setUrl(url); }} />)}\r\n            />\r\n            <Route\r\n              path='/Payment'\r\n              render={(props) => (<Payment {...props}\r\n                userNow={userNow}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)} />\r\n\r\n            <Route\r\n              path='/ShippingDetails'\r\n              render={(props) => (<ShippingDetails {...props}\r\n                userNow={userNow}\r\n                changeUser={(newUser) => { changeUser(newUser); }}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)} />\r\n\r\n\r\n\r\n            <Route\r\n              path='/ProductDetails'\r\n              render={(props) => (<ProductDetails {...props}\r\n                userNow={userNow}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)} />\r\n\r\n            <Route\r\n              path='/PersonalArea'\r\n              render={(props) => (<PersonalArea {...props}\r\n                userNow={userNow}\r\n                setUrl={(url) => { setUrl(url); }}\r\n                changeUser={(newUser) => { changeUser(newUser); }}\r\n              />)} />\r\n\r\n\r\n            <Route\r\n              path='/updateProduct'\r\n              render={(props) => (<ProductDetails {...props}\r\n                userNow={userNow}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)} />\r\n\r\n            <Route\r\n              path='/signAccount'\r\n              render={(props) => (<SignAccount {...props}\r\n                userNow={userNow}\r\n                setUrl={(url) => { setUrl(url); }}\r\n              />)} />\r\n\r\n            <Route\r\n              path='/about'\r\n              render={(props) => (<About {...props}\r\n              />)} />\r\n\r\n            <Route\r\n              render={(props) => (<NotFound {...props}\r\n              />)} />\r\n\r\n          </Switch>\r\n        </div>\r\n      }\r\n      {\r\n        isShabbos &&\r\n        <div className=\"container1\">\r\n          <h4>אתר זה סגור בשבת</h4>\r\n          <p>\r\n            משתמש יקר, שמירת שבת הינה ערך עליון, ועל כן האתר חסום כעת.\r\n          </p>\r\n          <p>\r\n            נשמח לשרת אתכם לאחר השבת.\r\n          </p>\r\n          <p>\r\n            <a href=\"https://www.hidabroot.org/%D7%A9%D7%91%D7%AA\" target=\"_blank\">לפרטים נוספים</a>\r\n          </p>\r\n\r\n\r\n        </div>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\reportWebVitals.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Header\\Header.js",["154","155"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport logo from \"../../asset/FURNISH.png\";\r\nimport \"./Header.css\";\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport UserAccount from '../UserAccount/UserAccount'\r\nimport Cart from '../Cart/Cart'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Header(props) {\r\n    const myUserNow = props.userNow;\r\n    const changeUser = props.changeUser;\r\n    let setUrl = props.setUrl;\r\n    const [myUrl, setMyUrl] = useState(props.url);\r\n    const [respon, setRespon] = useState(false)\r\n    let ref = useRef(null);\r\n    let history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        setMyUrl(props.url);\r\n    }, [props.url])\r\n\r\n    const userPopover = (\r\n        <Popover id=\"popover-contained\" className=\"popover-user\" >\r\n            <Popover.Title as=\"h3\" className=\"title\">פרטי חשבון</Popover.Title>\r\n            <Popover.Content>\r\n                <UserAccount\r\n                    userNow={myUserNow}\r\n                    changeUser={changeUser}\r\n                    closePopover={closePopover}\r\n                    setUrl={(url) => { setUrl(url); }}\r\n                    root=\"header\" />\r\n            </Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n\r\n    const cartPopover = (\r\n\r\n        <Popover id=\"popover-contained\" className=\"popover-cart\" >\r\n            <Popover.Title as=\"h3\" className=\"title\">עגלת הקניות</Popover.Title>\r\n            <Popover.Content>\r\n                <Cart\r\n                    userNow={myUserNow}\r\n                    closePopover={closePopover}\r\n                    setUrl={(url) => { setUrl(url); }} />\r\n            </Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n    function closePopover() {\r\n        document.body.click();\r\n    }\r\n\r\n    function change() {\r\n        setRespon(!respon);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"header\" >\r\n            <div className=\"logoAndUser\">\r\n                <div className=\"logo-div\">\r\n                    <img src={logo} alt=\"logo\" className=\"logo\" onClick={() => {\r\n                        setUrl(\"/\");\r\n                        history.push(\"/\");\r\n                    }\r\n                    } />\r\n                </div>\r\n\r\n                <div ref={ref} className=\"user\">\r\n                    <span className=\"userIcon\">\r\n                        <i className=\"far fa-user-circle\"> </i>\r\n                    </span>\r\n\r\n                    {(myUserNow.id === \"\" || myUserNow === null) && (\r\n                        <Link\r\n                            to={\"/LoginSign\"}\r\n                            style={{ textDecoration: \"none\" }}\r\n                            className=\"login\"\r\n                        >\r\n                            <h6 className={\"signin-h6\"} onClick={() => { setUrl(\"/LoginSign\") }}>התחבר\\הרשם </h6>\r\n                        </Link>\r\n                    )}\r\n                    {myUserNow.id !== \"\" && (\r\n                        <OverlayTrigger\r\n                            ref={r => (ref = r)}\r\n                            container={ref.current}\r\n                            trigger=\"click\"\r\n                            placement=\"auto\"\r\n                            overlay={userPopover}\r\n                            rootClose\r\n                        >\r\n                            <h6 className={\"login-h6\"}>{myUserNow.firstName} </h6>\r\n                        </OverlayTrigger>\r\n                    )}\r\n\r\n                </div>\r\n                <div className=\"line\"></div>\r\n                <div ref={ref} className=\"bag\">\r\n                    <span className=\"bagIcon\">\r\n                        <i className=\"fas fa-shopping-bag\"></i>\r\n                    </span>\r\n\r\n                    <OverlayTrigger\r\n                        ref={r => (ref = r)}\r\n                        container={ref.current}\r\n                        trigger=\"click\"\r\n                        placement=\"auto\"\r\n                        overlay={cartPopover}\r\n                        rootClose\r\n                    >\r\n                        <h6 className=\"my-cart\" >עגלת הקניות </h6>\r\n                    </OverlayTrigger>\r\n                </div>\r\n\r\n                <div className={(respon === true) ? \"responsive\" : \"nav-bar\"}>\r\n                    <ul >\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/\"); }}\r\n                                id={myUrl === \"/\" ? \"active\" : \"\"}>\r\n                                דף הבית\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/closet\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/closet\"); }}\r\n                                id={myUrl === \"/closet\" ? \"active\" : \"\"}>\r\n                                ארונות\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/bed\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/bed\"); }}\r\n                                id={myUrl === \"/bed\" ? \"active\" : \"\"}>\r\n                                מיטות\r\n                            </NavLink></li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/table\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/table\"); }}\r\n                                id={myUrl === \"/table\" ? \"active\" : \"\"}>\r\n                                שולחנות\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/sofa\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/sofa\"); }}\r\n                                id={myUrl === \"/sofa\" ? \"active\" : \"\"}>\r\n                                ספות\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/chair\"\r\n                                className=\"navlink\"\r\n                                onClick={() => { setUrl(\"/chair\"); }}\r\n                                id={myUrl === \"/chair\" ? \"active\" : \"\"}>\r\n                                כסאות\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                to=\"/about\"\r\n                                onClick={() => { setUrl(\"/about\"); }}\r\n                                className=\"navlink\"\r\n                                id={myUrl === \"/about\" ? \"active\" : \"\"}\r\n                            >\r\n                                אודות\r\n                            </NavLink>\r\n                        </li>\r\n                        <a href=\"javascript:void(0);\" className=\"icon\" onClick={() => { change(); }}>\r\n                            <i className=\"fa fa-bars\"></i>\r\n                        </a>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\SignUp\\SignUpClient.js",["156","157","158"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport { validId, validMail, validName, validPasswords, validPhone } from '../InputForm/Validation.js'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { saveData } from '../Shared/UsesFunction'\r\nimport InputForm from '../InputForm/InputForm'\r\nimport Message from '../Message/Message'\r\nimport './SignUpClient.css'\r\n\r\nfunction SignUpClient(props) {\r\n    let changeUser = props.changeUser;\r\n    let mode = props.mode || \"\";\r\n    let userNow = props.userNow || \"\";\r\n    let setUrl = props.setUrl;\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [sumbit, setSumbit] = useState(false);\r\n\r\n    const numInputs = 8;\r\n    let numSuccess = 0;\r\n    let history = useHistory();\r\n    let clientData = {\r\n        id: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        email: \"\",\r\n        city: \"\",\r\n        password: \"\"\r\n    };\r\n\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n            //returns the sumbit to false for allow pressing the button again\r\n            setSumbit(false);\r\n            //if all the inputs return ok- no errors\r\n            if (numSuccess === numInputs && mode === \"\") {\r\n                addUser();\r\n            }\r\n            else if (numSuccess === numInputs && mode === \"update\") {\r\n                updateUser();\r\n            }\r\n        }\r\n\r\n    }, [sumbit])\r\n\r\n\r\n    const handelSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n\r\n    //add user to the db\r\n    async function addUser() {\r\n        let response = await fetch('http://localhost:27017/users/signUp', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(clientData),\r\n        });\r\n        \r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            changeUser(clientData);\r\n            history.push(\"/\");\r\n            setUrl(\"/\");\r\n        }\r\n        else if (response2 == \"משתמש קיים\") {\r\n            setMessage(\"משתמש קיים במערכת, עליך להתחבר\");\r\n            setShowAlert(true);\r\n        }\r\n        else{\r\n            setMessage(response2);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n    //update the user details in the db\r\n    async function updateUser() {\r\n        clientData.id = userNow.id;\r\n        clientData.bankNumber = userNow.bankNumber;\r\n        clientData.bankAccount = userNow.bankAccount;\r\n        clientData.branchNumber = userNow.branchNumber;\r\n        if (clientData.firstName === \"\") clientData.firstName = userNow.firstName;\r\n        if (clientData.lastName === \"\") clientData.lastName = userNow.lastName;\r\n        if (clientData.phone === \"\") clientData.phone = userNow.phone;\r\n        if (clientData.city === \"\") clientData.city = userNow.city;\r\n        if (clientData.password === \"\") clientData.password = userNow.password;\r\n        \r\n        let response = await fetch('http://localhost:27017/users/updateUser', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(clientData)\r\n        });\r\n       \r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            changeUser(clientData);\r\n            setMessage(\"עודכן בהצלחה\");\r\n            setShowAlert(true);\r\n        }\r\n        else{\r\n            setMessage(\"ארעה שגיאה: \"+response2);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"SignUpClient\">\r\n\r\n            <form onSubmit={handelSubmit} className=\"container1\">\r\n                <h2 className=\"header\"><b> פרטי משתמש </b></h2>\r\n                <InputForm\r\n                    nameComp=\"שם פרטי\"\r\n                    value={userNow.firstName}\r\n                    type={\"text\"}\r\n                    validationFunction={(data) => {\r\n                        let message = validName(data);\r\n                        if (message === \"\") saveData(clientData, \"firstName\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"שם משפחה\"\r\n                    type={\"text\"}\r\n                    value={userNow.lastName}\r\n                    validationFunction={(data) => {\r\n                        let message = validName(data);\r\n                        if (message === \"\") saveData(clientData, \"lastName\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"תעודת זהות\"\r\n                    type={\"text\"}\r\n                    value={userNow.id}\r\n                    validationFunction={(data) => {\r\n                        let message = validId(data);\r\n                        if (message === \"\") saveData(clientData, \"id\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    disabled={mode === \"update\" ? true : false}\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"פלאפון\"\r\n                    type={\"text\"}\r\n                    value={userNow.phone}\r\n                    validationFunction={(data) => {\r\n                        let message = validPhone(data);\r\n                        if (message === \"\") saveData(clientData, \"phone\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"כתובת אימייל\"\r\n                    type={\"text\"}\r\n                    value={userNow.email}\r\n                    validationFunction={(data) => {\r\n                        let message = validMail(data);\r\n                        if (message === \"\") saveData(clientData, \"email\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"עיר\"\r\n                    type={\"text\"}\r\n                    value={userNow.city}\r\n                    validationFunction={(data) => {\r\n                        let message = validName(data);\r\n                        if (message === \"\") saveData(clientData, \"city\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"סיסמה\"\r\n                    type={\"password\"}\r\n                    value={userNow.password}\r\n                    validationFunction={(data) => { return validPasswords(data, \"Password\"); }}\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"ודא סיסמה\"\r\n                    type={\"password\"}\r\n                    validationFunction={(data) => {\r\n                        let message = validPasswords(data, \"Verify Password\");\r\n                        if (message === \"\") saveData(clientData, \"password\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n\r\n                <button type=\"submit\" className=\"btn1\">{mode === \"\" ? \"הרשם\" : \"עדכן\"}</button>\r\n            </form>\r\n\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                        if (mode === \"\") {\r\n                            history.push(\"/LoginSign\");\r\n                            setUrl(\"/LoginSign\");\r\n                        }\r\n                    }\r\n                    }\r\n                    type={mode === \"\" ? \"\" : \"success\"}\r\n                />\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default SignUpClient\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\LoginSign\\LoginSign.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Home\\Home.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Payment\\Payment.js",["159","160","161","162"],"import React, { useState, useEffect } from 'react'\r\nimport { validId, validCreditCard, validYear, validMonth, valid3Digit } from '../InputForm/Validation.js'\r\nimport InputForm from '../InputForm/InputForm'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Paypal from \"../Paypal/Paypal\";\r\nimport { saveData } from '../Shared/UsesFunction'\r\nimport './Payment.css'\r\nimport Message from '../Message/Message'\r\n\r\nfunction Payment(props) {\r\n    let setUrl = props.setUrl;\r\n    const userNow = props.userNow;\r\n    const [sumbit, setSumbit] = useState(false);\r\n    const [creditDetail, setCreditDetail] = useState({ id: userNow.id, idCredit: \"\", number: \"\", year: \"\", month: \"\", digit: \"\" });\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [checked, setChecked] = useState(false);\r\n    const [total, setTotal] = useState(0);\r\n\r\n    let history = useHistory();\r\n    let creditDetailTemp = { id: userNow.id, idCredit: \"\", number: \"\", year: \"\", month: \"\", digit: \"\" };\r\n    let numSuccess = 0;\r\n    const numInputs = 5;\r\n\r\n\r\n\r\n    useEffect(async() => {\r\n        await checkHaveCreditSaved();\r\n        await sumOrders();\r\n    }, [userNow])\r\n\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n            setSumbit(false);\r\n            if (numSuccess === numInputs || (creditDetail.idCredit !== \"\" && numSuccess === 1)) {\r\n               //save credit details\r\n                if (creditDetail.idCredit===\"\" || checked) {\r\n                    let response = await fetch('http://localhost:27017/users/changeCreditDetail', {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify(creditDetailTemp)\r\n                    });\r\n\r\n                    if (response.status !== 200) {\r\n                        let response2=await response.text();\r\n                        setMessage(\"ארעה שגיאה בעת שמירת הנתונים: \"+response2);\r\n                        setShowAlert(true);\r\n                        return;\r\n                    }  \r\n                }\r\n\r\n                await makePay();\r\n            }\r\n        }\r\n    }, [sumbit])\r\n\r\n\r\n    const handelSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n    async function sumOrders() {\r\n        //get the total price of the products in the cart\r\n        let response = await fetch('http://localhost:27017/orders/getSumCart/' + userNow.id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        let response2 = await response.json();\r\n\r\n        if (response.status === 200) {\r\n            setTotal(Number(response2.res));\r\n        }\r\n        else{\r\n            console.log(response2.err);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Checks whether payment details are stored in the system to upload them to the user\r\n    const checkHaveCreditSaved = async () => {\r\n        let response = await fetch('http://localhost:27017/users/getCreditDetails/' + userNow.id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            let response2 = await response.json();\r\n            setCreditDetail(response2);\r\n        }\r\n        else return false;\r\n    }\r\n\r\n    const makePay = async () => {\r\n        \r\n        let response = await fetch('http://localhost:27017/orders/payment', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({idClient: userNow.id})\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            setMessage(\"התשלום התקבל בהצלחה\");\r\n            setShowAlert(true);\r\n        }\r\n        else {\r\n            let response2 = response.text();\r\n            setMessage(\"ארעה שגיאה: \" + response2);\r\n            setShowAlert(true);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"payment\">\r\n\r\n            {userNow.id !== \"\" &&\r\n                <div className=\"container1\">\r\n                    <h3 className=\"header-pay\"><b> תשלום </b></h3>\r\n                    <div className=\"paypal-button\">\r\n                        <Paypal history={history} total={total} makePay={() => { makePay(); }} />\r\n                    </div>\r\n                    <h4 className=\"or\">-או-</h4>\r\n                    {\r\n                        creditDetail.idCredit !== \"\" && !checked &&\r\n                        <form onSubmit={handelSubmit}>\r\n\r\n                            <label>מספר אשראי</label>\r\n                            <input type=\"text\" value={creditDetail.number} disabled className=\"numCredit\"></input>\r\n                            <InputForm\r\n                                nameComp=\"תעודת זהות בעל הכרטיס\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = validId(data);\r\n                                    if (message === \"\" && data !== creditDetail.idCredit) message = \"תעודת הזהות אינה מתאימה לכרטיס\";\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n                            <h5 className=\"pay\">לתשלום: &#8362;{total} </h5>\r\n                            <small onClick={() => { setChecked(true); }} className=\"change-pay\">לשינוי אמצעי תשלום</small>\r\n                            <button type=\"submit\" className=\"btn1\">אישור</button>\r\n                        </form>\r\n                    }\r\n\r\n\r\n                    {(creditDetail.idCredit === \"\" || checked) &&\r\n\r\n                        <form onSubmit={handelSubmit}>\r\n\r\n\r\n                            <InputForm\r\n                                nameComp=\"תעודת זהות בעל הכרטיס\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = validId(data);\r\n                                    if (message === \"\") saveData(creditDetailTemp, \"idCredit\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n                            <InputForm\r\n                                nameComp=\"מספר אשראי\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = validCreditCard(data);\r\n                                    if (message === \"\") saveData(creditDetailTemp, \"number\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n                            <InputForm\r\n                                nameComp=\"שנה\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = validYear(data);\r\n                                    if (message === \"\") saveData(creditDetailTemp, \"year\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"חודש\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = validMonth(data);\r\n                                    if (message === \"\") saveData(creditDetailTemp, \"month\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"3 ספרות בגב הכרטיס\"\r\n                                type={\"text\"}\r\n                                validationFunction={(data) => {\r\n                                    let message = valid3Digit(data);\r\n                                    if (message === \"\") saveData(creditDetailTemp, \"digit\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n                            <h5 className=\"pay\">לתשלום: &#8362;{total} </h5>\r\n                            <button type=\"submit\" className=\"btn1\">בצע תשלום</button>\r\n                        </form>\r\n                    }\r\n\r\n                </div>\r\n            }\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                        history.push(\"/personalArea\");\r\n                        setUrl(\"/personalArea\");\r\n                    }\r\n                    }\r\n                    type=\"success\" />\r\n            }\r\n            {userNow.id === \"\" &&\r\n                <div className=\"container1\">\r\n                    <h5>עליך להיות מחובר כדי לשלם</h5>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Payment","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\InputForm\\Validation.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\SignAccount\\SignAccount.js",["163","164"],"import React, { useState, useEffect } from 'react'\r\nimport { validBankBranch, validAccount } from '../InputForm/Validation.js'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputForm from '../InputForm/InputForm'\r\nimport { saveData } from '../Shared/UsesFunction'\r\nimport './SignAccount.css'\r\nimport Message from '../Message/Message'\r\n\r\nfunction SignAccount(props) {\r\n    let userNow = props.userNow;\r\n    let mode = props.mode || \"\";\r\n    let setUrl = props.setUrl;\r\n\r\n    const [sumbit, setSumbit] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    let accountData = { bankNumber: \"\", branchNumber: \"\", bankAccount: \"\" };\r\n    let numSuccess = 0;\r\n    const numInputs = 3;\r\n    let history = useHistory();\r\n\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n            //returns the sumbit to false for allow pressing the button again\r\n            setSumbit(false);\r\n            //if all the inputs return ok- no errors\r\n            if (numSuccess === numInputs) {\r\n                await apdudeAccount();\r\n            }\r\n        }\r\n\r\n    }, [sumbit])\r\n\r\n    const handelSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n    //update the account details in the user details in db\r\n    async function apdudeAccount() {\r\n        accountData = { ...accountData, id: userNow.id };\r\n        let response = await fetch('http://localhost:27017/users/updateAccount', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(accountData),\r\n        });\r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            if (mode === \"\") {\r\n                setMessage(\"החשבון נשמר בהצלחה\");\r\n            }\r\n            else {\r\n                setMessage(\"החשבון עודכן בהצלחה\");\r\n            }\r\n            setShowAlert(true);\r\n        }\r\n        else {\r\n            setMessage(response2);\r\n            setShowAlert(true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"SignAccount\">\r\n\r\n\r\n            {userNow.id !== \"\" && <form onSubmit={handelSubmit} className=\"container1\">\r\n                <h2 className=\"centered\"><b> פרטי בנק</b></h2>\r\n                <p className=\"centered\">כדי להוסיף מוצר עליך לשמור פרטי חשבון בנק, לצורך קבלת הכסף ממכירת הפריטים</p>\r\n\r\n                <InputForm\r\n                    nameComp=\"מספר בנק\"\r\n                    type={\"text\"}\r\n                    value={userNow.bankNumber}\r\n                    validationFunction={(data) => {\r\n                        let message = validBankBranch(data);\r\n                        if (message === \"\") saveData(accountData, \"bankNumber\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"מספר סניף\"\r\n                    type={\"text\"}\r\n                    value={userNow.branchNumber}\r\n                    validationFunction={(data) => {\r\n                        let message = validBankBranch(data);\r\n                        if (message === \"\") saveData(accountData, \"branchNumber\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n                <InputForm\r\n                    nameComp=\"מספר חשבון בנק\"\r\n                    type={\"text\"}\r\n                    value={userNow.bankAccount}\r\n                    validationFunction={(data) => {\r\n                        let message = validAccount(data);\r\n                        if (message === \"\") saveData(accountData, \"bankAccount\", data);\r\n                        return message\r\n                    }\r\n                    }\r\n                    sumbited={sumbit}\r\n                    wasSuccess={() => { wasSuccessAdd(); }}\r\n                />\r\n\r\n                <button type=\"submit\" className=\"btn1\">{mode === \"\" ? \"שמור\" : \"עדכן\"}</button>\r\n            </form>}\r\n            {userNow.id === \"\" &&\r\n                <div className=\"container1\">\r\n                    <h5>עליך להיות מחובר כדי להוסיף פרטי חשבון</h5>\r\n                </div>\r\n            }\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                        if (mode === \"\") {\r\n                            history.push(\"/ProductDetails\");\r\n                            setUrl(\"/ProductDetails\");\r\n                        }\r\n                    }\r\n                    }\r\n                    type=\"success\" />\r\n            }\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default SignAccount\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ShippingDetails\\ShippingDetails.js",["165","166","167","168","169","170","171"],"import React, { useState, useEffect } from 'react'\r\nimport { validNum, validName } from '../InputForm/Validation.js'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputForm from '../InputForm/InputForm'\r\nimport { saveData } from '../Shared/UsesFunction'\r\nimport Message from '../Message/Message.js';\r\nimport './ShippingDetails.css'\r\n\r\n\r\nexport default function ShippingDetails(props) {\r\n    let userNow = props.userNow;\r\n    let setUrl = props.setUrl;\r\n    const [checked, setChecked] = useState(false);\r\n    const [sumbit, setSumbit] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    let numSuccess = 0;\r\n    const numInputs = 4;\r\n    let history = useHistory();\r\n    const [shippingDetails, setShippingDetails] = useState({ city: \"\", address: \"\", buildingNumber: \"\", homeNumber: \"\" })\r\n    let shippingDetailsTemp = { city: \"\", address: \"\", buildingNumber: \"\", homeNumber: \"\" };\r\n\r\n    const handelSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n    useEffect(async () => {\r\n        //get the user ShippingDetails\r\n        if (userNow.id != \"\") {\r\n            let response = await fetch('http://localhost:27017/users/getShippingDetails/' + userNow.id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            if (response.status == 200) {\r\n                let response2 = await response.json();\r\n                setShippingDetails(response2);\r\n            }\r\n        }\r\n    }, [userNow])\r\n\r\n    //update the orders with the current Shipping details\r\n    const updateOrders = async () => {\r\n        let response = await fetch('http://localhost:27017/orders/addShippingDetails', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n            , body: JSON.stringify({\r\n                idClient: userNow.id, ...shippingDetailsTemp\r\n            })\r\n        });\r\n\r\n        if (response.status == 200) {\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            let response2 = await response.json();\r\n            setMessage(response2.err);\r\n            setShowAlert(true);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    //update the orders with the current Shipping details\r\n    const updateUser = async () => {\r\n        let shippingDetails2 = {};\r\n        shippingDetails2.cityDel = shippingDetailsTemp.city;\r\n        shippingDetails2.address = shippingDetailsTemp.address;\r\n        shippingDetails2.buildingNumber = shippingDetailsTemp.buildingNumber;\r\n        shippingDetails2.homeNumber = shippingDetailsTemp.homeNumber;\r\n\r\n        let response = await fetch('http://localhost:27017/users/updateAddress', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n            , body: JSON.stringify({\r\n                id: userNow.id, ...shippingDetails2\r\n            })\r\n        });\r\n\r\n        if (response.status == 200) {\r\n            let response2 = await response.json();\r\n            console.log(response2);\r\n            props.changeUser(response2);\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            let response2 = await response.json();\r\n            setMessage(response2.err);\r\n            setShowAlert(true);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n            //returns the sumbit to false for allow pressing the button again\r\n            setSumbit(false);\r\n            //if all the inputs return ok- no errors\r\n            if (numSuccess === numInputs) {\r\n                shippingDetailsTemp.city = shippingDetailsTemp.city || shippingDetails.city;\r\n                shippingDetailsTemp.address = shippingDetailsTemp.address || shippingDetails.address;\r\n                shippingDetailsTemp.buildingNumber = shippingDetailsTemp.buildingNumber || shippingDetails.buildingNumber;\r\n                shippingDetailsTemp.homeNumber = shippingDetailsTemp.homeNumber || shippingDetails.homeNumber;\r\n                let success = await updateOrders();\r\n                let success2;\r\n                //if the user apply to save the data to the other times\r\n                if (checked && success) {\r\n                    success2 = await updateUser();\r\n                }\r\n                if (success && (!checked || success2)) {\r\n                    history.push(\"/Payment\");\r\n                    setUrl(\"/Payment\");\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [sumbit])\r\n\r\n\r\n    return (\r\n        <div className=\"ShippingDetails\">\r\n            {userNow.id !== \"\" &&\r\n                <form onSubmit={handelSubmit}>\r\n                    <h3 className=\"header\"><b> פרטי משלוח </b></h3>\r\n                    <div className=\"form\">\r\n                        <InputForm\r\n                            nameComp=\"עיר\"\r\n                            type={\"text\"}\r\n                            value={shippingDetails.city}\r\n                            validationFunction={(data) => {\r\n                                let message = validName(data);\r\n                                if (message === \"\") saveData(shippingDetailsTemp, \"city\", data);\r\n                                return message\r\n                            }\r\n                            }\r\n                            sumbited={sumbit}\r\n                            wasSuccess={() => { wasSuccessAdd(); }}\r\n                        />\r\n                        <InputForm\r\n                            nameComp=\"רחוב\"\r\n                            type={\"text\"}\r\n                            value={shippingDetails.address}\r\n                            validationFunction={(data) => {\r\n                                let message = validName(data);\r\n                                if (message === \"\") saveData(shippingDetailsTemp, \"address\", data);\r\n                                return message\r\n                            }\r\n                            }\r\n                            sumbited={sumbit}\r\n                            wasSuccess={() => { wasSuccessAdd(); }}\r\n                        />\r\n                        <InputForm\r\n                            nameComp=\"מספר בניין\"\r\n                            type={\"text\"}\r\n                            value={shippingDetails.buildingNumber}\r\n                            validationFunction={(data) => {\r\n                                let message = validNum(data, [3, \"upto\"]);\r\n                                if (message === \"\") saveData(shippingDetailsTemp, \"buildingNumber\", data);\r\n                                return message\r\n                            }\r\n                            }\r\n                            sumbited={sumbit}\r\n                            wasSuccess={() => { wasSuccessAdd(); }}\r\n                        />\r\n                        <InputForm\r\n                            nameComp=\"מספר בית\"\r\n                            type={\"text\"}\r\n                            value={shippingDetails.homeNumber}\r\n                            validationFunction={(data) => {\r\n                                let message = validNum(data, [3, \"upto\"]);\r\n                                if (message === \"\") saveData(shippingDetailsTemp, \"homeNumber\", data);\r\n                                return message\r\n                            }\r\n                            }\r\n                            sumbited={sumbit}\r\n                            wasSuccess={() => { wasSuccessAdd(); }}\r\n                        />\r\n\r\n                        <label className=\"container-check\">האם לשמור את פרטי המשלוח לפעמים הבאות?\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                onChange={() => { setChecked(true); }}\r\n                            />\r\n                            <span className=\"checkmark\"></span>\r\n                        </label>\r\n                        <button type=\"submit\" className=\"btn1\"><span>המשך</span></button>\r\n\r\n                    </div>\r\n                </form>\r\n            }\r\n            {userNow.id === \"\" &&\r\n\r\n                <h5>עליך להיות מחובר כדי לבצע הזמנה</h5>\r\n\r\n            }\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                    }\r\n                    } />\r\n            }\r\n\r\n        </div >\r\n    );\r\n\r\n}\r\n\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ProductDetails\\ProductDetails.js",["172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import React, { useState, useEffect } from 'react'\r\nimport { validNum } from '../InputForm/Validation.js'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputForm from '../InputForm/InputForm'\r\nimport './ProductDetails.css'\r\nimport Message from '../Message/Message'\r\n\r\nfunction ProductDetails(props) {\r\n\r\n    let userNow = props.userNow;\r\n    let idProduct = props.location.id || \"\";\r\n\r\n    const [sumbit, setSumbit] = useState(false);\r\n    const numInputs = 8;\r\n    const [productData, setProductData] = useState({\r\n        _id: \"\",\r\n        idSeller: userNow.id,\r\n        name: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        mainImgSrc: \"\",\r\n        type: \"\",\r\n        color: \"\",\r\n        price: 0,\r\n        quality: \"\",\r\n        status: \"true\"\r\n    });\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    let categoryOption = [\"בחר קטגוריה\", \"ארונות\", \"שולחנות\", \"מיטות\", \"ספות\", \"כיסאות\"];\r\n    const [category, setCategory] = useState(productData.category || \"\");\r\n\r\n    const [typeOption, setTypeOption] = useState(getTypeOption());\r\n    const [type, setType] = useState(productData.type || \"\");\r\n\r\n    let colorsOption = [\"בחר צבע\", \"לבן\", \"שחור\", \"אפור\", \"אדום\", \"כחול\", \"סגול\", \"ורוד\", \"עץ\", \"חום\", \"ירוק\", \"צהוב\", \"כתום\", \"תכלת\", \"צבעוני\"];\r\n    const [color, setColor] = useState(productData.color || \"\");\r\n\r\n    let qualityOption = [\"בחר מצב מוצר\", \"חדש\", \"דרוש תיקון\", \"מצב טוב\", \"משומש\", \"כמו חדש\"];\r\n    const [quality, setQuality] = useState(productData.quality || \"\");\r\n\r\n    let setUrl = props.setUrl;\r\n    let history = useHistory();\r\n    let numSuccess = 0;\r\n    let tempProductData = {\r\n        _id: \"\",\r\n        idSeller: userNow.id,\r\n        name: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        mainImgSrc: \"\",\r\n        type: \"\",\r\n        color: \"\",\r\n        price: 0,\r\n        quality: \"\"\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setColor(productData.color);\r\n        setType(productData.type);\r\n        setCategory(productData.category);\r\n        setQuality(productData.quality);\r\n    }, [productData.category, productData.color, productData.type, productData.quality])\r\n\r\n    //load data\r\n    useEffect(async () => {\r\n        if (idProduct !== null && idProduct !== \"\") {\r\n            let response = await fetch('http://localhost:27017/products/getProduct', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body:JSON.stringify({id:idProduct,projectionProduct:\r\n                    {name:1,price:1,description:1,category:1,mainImgSrc:1,type:1,color:1,quality:1}})\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            if (response.status === 200) {\r\n                setProductData(response2.product);\r\n            }\r\n\r\n            else {\r\n                setMessage(\"ארעה שגיאה: \" + response2.err);\r\n                setShowAlert(true);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    //load the type option according the category choosed\r\n    useEffect(() => {\r\n        setTypeOption(getTypeOption());\r\n    }, [category])\r\n\r\n    //check the validity of the data and store it in the db\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n\r\n            //returns the sumbit to false for allow pressing the button again\r\n            setSumbit(false);\r\n            if (numSuccess === numInputs && idProduct == \"\") {\r\n                addProduct();\r\n            }\r\n\r\n            if (numSuccess === numInputs && idProduct !== \"\") {\r\n                updateProduct();\r\n            }\r\n        }\r\n\r\n    }, [sumbit])\r\n\r\n\r\n    function getTypeOption() {\r\n        let types = [];\r\n        switch (category) {\r\n            case \"\": case undefined: case \"בחר קטגוריה\":\r\n                types = [\"בחר תחילה קטגוריה\"];\r\n                break;\r\n            case \"שולחנות\":\r\n                types = [\"בחר סוג\", \"שולחן כתיבה\", \"שולחן אוכל\", \"שולחן קפה\"];\r\n                break;\r\n            case \"ארונות\":\r\n                types = [\"בחר סוג\", \"סיפרייה\", \"מזנון\", \"ארון הזזה\", \"ארון מטבח\", \"ארון בגדים\"];\r\n                break;\r\n            case \"מיטות\":\r\n                types = [\"בחר סוג\", \"ספפה\", \"מיטה נפתחת\", \"מיטת תינוק\", \"מיטת קומותיים\", \"מיטה זוגית\", \"מיטת ילדים\", \"מיטת יחיד\"];\r\n                break;\r\n            case \"ספות\":\r\n                types = [\"בחר סוג\", \"ספפה\", \"כורסה\", \"ספה פינתית\", \"ספה 2+3\", \"ספה 3 מושבים\", \"ספה לילדים\", \"ספה דו מושבית\"];\r\n                break;\r\n            case \"כיסאות\":\r\n                types = [\"בחר סוג\", \"כסאות אוכל\", \"כסאות בר\", \"כסא משרדי\", \"כסא ילדים\", \"כסא חצר\", \"כסאות ים\", \"כסא לסלון\", \"כסא נדנדה\"];\r\n                break;\r\n        }\r\n        return types;\r\n    }\r\n\r\n\r\n    const handelSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n    function saveData(inputName, data) {\r\n        switch (inputName) {\r\n            case \"category\":\r\n                setCategory(data);\r\n                break;\r\n            case \"type\":\r\n                setType(data);\r\n                break;\r\n            case \"quality\":\r\n                setQuality(data);\r\n                break;\r\n            case \"color\":\r\n                setColor(data);\r\n                break;\r\n            default:\r\n                tempProductData[inputName] = data;\r\n                break;\r\n        }\r\n    }\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n    const addProduct = async () => {\r\n        //add new product\r\n        tempProductData.category = category;\r\n        tempProductData.color = color;\r\n        tempProductData.type = type;\r\n        tempProductData.quality = quality;\r\n\r\n        let response = await fetch('http://localhost:27017/products/addProduct', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(tempProductData)\r\n        });\r\n\r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            setMessage(\"המוצר נוסף בהצלחה\");\r\n            setShowAlert(true);\r\n        }\r\n        else {\r\n            setMessage(\"ארעה שגיאה: \" + response2);\r\n            setShowAlert(true);\r\n        }\r\n\r\n    }\r\n\r\n    function updateTempData() {\r\n        tempProductData.category = category;\r\n        tempProductData.type = type;\r\n        tempProductData.color = color;\r\n        tempProductData.quality = quality;\r\n        if (tempProductData.name === \"\") tempProductData.name = productData.name;\r\n        if (tempProductData.description === \"\") tempProductData.description = productData.description;\r\n        if (tempProductData.price === \"\") tempProductData.price = Number(productData.price);\r\n        if (tempProductData.mainImgSrc === \"\") tempProductData.mainImgSrc = productData.mainImgSrc;\r\n        tempProductData._id = productData._id;\r\n    }\r\n\r\n    const updateProduct = async () => {\r\n        //update product\r\n        updateTempData();\r\n        let response = await fetch('http://localhost:27017/products/updateProduct', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(tempProductData)\r\n        });\r\n\r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            setMessage(\"המוצר עודכן בהצלחה\");\r\n            setShowAlert(true);\r\n        }\r\n        else {\r\n            setMessage(\"ארעה שגיאה: \" + response2);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n    const deleteProduct = async () => {\r\n    \r\n        tempProductData = productData;\r\n        let response = await fetch('http://localhost:27017/products/deleteProduct', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ id: tempProductData._id })\r\n        });\r\n\r\n        let response2 = await response.text();\r\n        if (response2 === \"OK\") {\r\n            setMessage(\"המוצר נמחק בהצלחה\");\r\n            setShowAlert(true);\r\n        }\r\n        else {\r\n            setMessage(\"ארעה שגיאה: \" + response2);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"ProductDetails\">\r\n            <div>\r\n\r\n\r\n                {\r\n                    userNow.id !== \"\" && <div >\r\n                        <form onSubmit={handelSubmit} className=\"container1\">\r\n                            <h2 className=\"PD-h2\"><b> פרטי מוצר </b></h2>\r\n                            <InputForm\r\n                                nameComp=\"שם המוצר\"\r\n                                type=\"text\"\r\n                                value={productData.name}\r\n                                validationFunction={(data) => {\r\n                                    let message = \"\";\r\n                                    if (data == undefined || data == \"\") message = \"שדה נדרש\";\r\n                                    saveData(\"name\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n                            <InputForm\r\n                                nameComp=\"תיאור המוצר\"\r\n                                type=\"textarea\"\r\n                                value={productData.description}\r\n                                validationFunction={(data) => {\r\n                                    let message = \"\";\r\n                                    if (data == undefined || data == \"\") message = \"שדה נדרש\";\r\n                                    saveData(\"description\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"קטגוריה\"\r\n                                value={productData.category}\r\n                                type=\"select\"\r\n                                sumbited={sumbit}\r\n                                saveData={(data) => { saveData(\"category\", data); }}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                                arrayOption={categoryOption}\r\n                            />\r\n\r\n\r\n                            <InputForm\r\n                                nameComp=\" קישור לכתובת התמונה (התמונה צריכה להיות שמורה ברשת)\"\r\n                                type=\"text\"\r\n                                value={productData.mainImgSrc}\r\n                                validationFunction={(data) => {\r\n                                    let message = \"\";\r\n                                    if (data == undefined || data == \"\") message = \"שדה נדרש\";\r\n                                    saveData(\"mainImgSrc\", data);\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"מחיר\"\r\n                                type=\"text\"\r\n                                value={productData.price}\r\n                                validationFunction={(data) => {\r\n                                    let message = validNum(data, [5, \"upto\"]);\r\n                                    saveData(\"price\", Number(data));\r\n                                    return message\r\n                                }\r\n                                }\r\n                                sumbited={sumbit}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                            />\r\n\r\n\r\n                            <InputForm\r\n                                nameComp=\"צבע מרכזי\"\r\n                                type=\"select\"\r\n                                value={productData.color}\r\n                                sumbited={sumbit}\r\n                                saveData={(data) => { saveData(\"color\", data); }}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                                arrayOption={colorsOption}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"מצב המוצר\"\r\n                                type=\"select\"\r\n                                value={productData.quality}\r\n                                sumbited={sumbit}\r\n                                saveData={(data) => { saveData(\"quality\", data); }}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                                arrayOption={qualityOption}\r\n                            />\r\n\r\n                            <InputForm\r\n                                nameComp=\"סוג\"\r\n                                type=\"select\"\r\n                                value={productData.type}\r\n                                sumbited={sumbit}\r\n                                saveData={(data) => { saveData(\"type\", data); }}\r\n                                wasSuccess={() => { wasSuccessAdd(); }}\r\n                                arrayOption={typeOption}\r\n                            />\r\n\r\n                            <div className=\"buttons\">\r\n                                {\r\n                                    idProduct === \"\" &&\r\n                                    <button type=\"submit\" className=\"btn1\">\r\n                                        <span className=\"plus-icon\">\r\n                                            <i className=\"fas fa-plus\"></i>\r\n                                        </span>\r\n                                    </button>\r\n                                }\r\n\r\n\r\n                                {idProduct !== \"\" &&\r\n                                    <div className=\"buttons2\">\r\n                                        <button type=\"submit\" className={\"btn1\", \"v-btn\"}>\r\n                                            <span className=\"v-icon\">\r\n                                                <i className=\"fas fa-clipboard-check\"></i>\r\n                                            </span>\r\n                                        </button>\r\n                                        <div className=\"trash-icon-container\">\r\n                                            <span className=\"trash-icon\" onClick={() => { deleteProduct(); }}>\r\n                                                <i className=\"far fa-trash-alt\"></i>\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </form>\r\n                        {\r\n                            showAlert && <Message\r\n                                showAlert={showAlert}\r\n                                message={message}\r\n                                onClose={() => {\r\n                                    setShowAlert(false);\r\n                                    history.push(\"/PersonalArea\");\r\n                                    setUrl(\"/PersonalArea\");\r\n                                }\r\n                                }\r\n                                type=\"success\" />\r\n                        }\r\n                    </div>\r\n\r\n                }\r\n                {userNow.id === \"\" &&\r\n                    <div className=\"container1\">\r\n                        <h5>עליך להיות מחובר כדי להוסיף או לעדכן מוצר</h5>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ProductDetails\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\PersonalArea\\PersonalArea.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\About\\About.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\UpdateUser\\UpdateUser.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\NotFound\\NotFound.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\CategoryProductB\\CategoryProductB.js",["186","187"],"import React, { useEffect, useState } from 'react'\r\nimport FilterB from '../Filter/FilterB'\r\nimport Furinture from '../Furniture/Furinture'\r\n\r\nimport './CategoryProductB.css'\r\nexport default function CategoryProductB(props) {\r\n\r\n    let userNow = props.userNow;\r\n    let categoryShow = props.category;\r\n    const [category, setCategory] = useState(categoryShow);\r\n    const [cities, setCities] = useState([]);\r\n    const [types, setTypes] = useState([]);\r\n    const [colors, setColors] = useState([]);\r\n    const [quality, setQuality] = useState([]);\r\n    const [price, setPrice] = useState([]);\r\n\r\n    const [citiesChecked, setCitiesChecked] = useState([]);\r\n    const [typesChecked, setTypesChecked] = useState([]);\r\n    const [colorsChecked, setColorsChecked] = useState([]);\r\n    const [qualityChecked, setQualityChecked] = useState([]);\r\n    const [priceChecked, setPriceChecked] = useState([]);\r\n    const [isLoad, setIsLoad] = useState(false);\r\n\r\n    //load the filter parameters according to the category and rellevant products\r\n    useEffect(async () => {\r\n        setIsLoad(false);\r\n        setCategory(props.category);\r\n        let response = await fetch('http://localhost:27017/products/filterProducts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                category: categoryShow,\r\n                statusArray: [\"true\"],\r\n                projectionProduct: { category: 1, type: 1, color: 1, price: 1, quality: 1, idSeller: 1 },\r\n                projectionSeller:{_id:0,city:1}\r\n            })\r\n        });\r\n        if(response.status!==200) return;\r\n        let products = await response.json()\r\n        products=products.productsList;\r\n        let citiesTemp = [];\r\n        let typesTemp = [];\r\n        let colorsTemp = [];\r\n        let qualityTemp = [];\r\n        let maxPrice = 0;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            let city = products[i].sellerDetails.city;\r\n            if (!citiesTemp.includes(city)) {\r\n                citiesTemp.push(city);\r\n            }\r\n            if (!typesTemp.includes(products[i].product.type)) {\r\n                typesTemp.push(products[i].product.type);\r\n            }\r\n            if (!colorsTemp.includes(products[i].product.color)) {\r\n                colorsTemp.push(products[i].product.color);\r\n            }\r\n            if (!qualityTemp.includes(products[i].product.quality)) {\r\n                qualityTemp.push(products[i].product.quality);\r\n            }\r\n            if (Number(products[i].product.price) > maxPrice) maxPrice = Number(products[i].product.price);\r\n        }\r\n        setCities(citiesTemp);\r\n        setTypes(typesTemp);\r\n        setColors(colorsTemp);\r\n        setPrice([0, maxPrice]);\r\n        setQuality(qualityTemp);     \r\n\r\n    }, [props.category])\r\n\r\n    function changeArrays(cities, types, colors, price, quality) {\r\n        setCitiesChecked(cities.slice());\r\n        setColorsChecked(colors.slice());\r\n        setTypesChecked(types.slice());\r\n        setPriceChecked(price.slice());\r\n        setQualityChecked(quality.slice());\r\n    }\r\n\r\n  \r\n\r\n    return (\r\n        <div className=\"categoryProduct\">\r\n         \r\n\r\n            <div className=\"filter\">\r\n                <FilterB\r\n                    changeArrays={(cities, types, colors, price, quality) => { changeArrays(cities, types, colors, price, quality); }}\r\n                    category={category}\r\n                    cities={cities}\r\n                    types={types}\r\n                    colors={colors}\r\n                    price={price}\r\n                    quality={quality}\r\n                    citiesChecked={citiesChecked}\r\n                    colorsChecked={colorsChecked}\r\n                    typesChecked={typesChecked}\r\n                    priceChecked={priceChecked}\r\n                    qualityChecked={qualityChecked}\r\n                    setIsLoad={(bool) => { setIsLoad(bool); }} \r\n                    isLoad={isLoad}               \r\n                />\r\n            </div>\r\n            <div className=\"furniture\">\r\n                <Furinture\r\n                    userNow={userNow}\r\n                    category={category}\r\n                    cities={citiesChecked}\r\n                    price={priceChecked}\r\n                    types={typesChecked}\r\n                    colors={colorsChecked}\r\n                    quality={qualityChecked}\r\n                   \r\n                    />\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Message\\Message.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\InputForm\\InputForm.js",["188","189","190","191","192","193"],"import React, { useState, useEffect } from 'react'\r\nimport './InputForm.css'\r\nfunction InputForm(props) {\r\n    const { nameComp, type, validationFunction, sumbited, wasSuccess, value, disabled, saveData, arrayOption } = props;\r\n    const [data, setData] = useState(value);\r\n    const [validData, setvalidData] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (sumbited === true) {\r\n            //checks whether the data entered is valid by the function sent to the component \r\n            let message;\r\n            if (type != \"select\") {\r\n                if (data === undefined) message = \"שדה נדרש\";\r\n                else message = validationFunction(data);\r\n            }\r\n            else message = validSelects(data);\r\n            setvalidData(message);\r\n            //returns to the parent component that the data is valid\r\n            if (message === \"\") wasSuccess();\r\n        }\r\n\r\n    }, [sumbited]);\r\n\r\n    useEffect(() => {\r\n        setData(value)\r\n    }, [value])\r\n\r\n\r\n    const changeValue = (event) => {\r\n        setData(event.target.value);\r\n        setvalidData(\"\");\r\n        if (type == \"select\") saveData(event.target.value);\r\n    }\r\n\r\n    function validSelects(value) {\r\n        //check if the select value is valid\r\n        if (value === null || value === undefined) return \"עליך לבחור\";\r\n        let split = value.split(\" \");\r\n        if (split[0] !== \"בחר\" && value !== \"\") {\r\n            return \"\";\r\n        }\r\n        return \"עליך לבחור\";\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"inputForm1\">\r\n            <label htmlFor={nameComp}>{nameComp}</label>\r\n            {type === \"textarea\" &&\r\n                <div className=\"wrapper\">\r\n                    <div className=\"form-group\">\r\n                        <textarea className=\"form-control rounded-0\" id={nameComp} type={type} value={data} onChange={changeValue} rows=\"4\" cols=\"50\">\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                type == \"select\" &&\r\n                <select className=\"select\"\r\n                    onChange={(e) => {\r\n                        changeValue(e);\r\n                    }}\r\n                >\r\n                    {arrayOption.map((item, key) => {\r\n                        if (item == value) return <option selected id={key}>{item}</option>\r\n                        return <option id={key}>{item}</option>\r\n                    })}\r\n                </select>\r\n            }\r\n            {type !== \"textarea\" && type != \"select\" &&\r\n                <input id={nameComp} type={type} value={data} onChange={changeValue} disabled={disabled || false} />}\r\n            <small >{validData}</small>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default InputForm","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Cart\\Cart.js",["194","195"],"import React, { useState, useEffect } from 'react'\r\nimport ProductList from '../ProductsList/ProductsList.js'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Cart.css'\r\n\r\nexport default function Cart(props) {\r\n    const [productsFiltered, setProductsFiltered] = useState([]);\r\n    const [errorProducts, setErrorProduct] = useState([]);\r\n    const [validOrders, setValidOrders] = useState([])\r\n    const userNow = props.userNow;\r\n    const [isLoad, setisLoad] = useState(false)\r\n    let closePopover = props.closePopover;\r\n    let history = useHistory();\r\n    let setUrl = props.setUrl;\r\n\r\n    //load data\r\n    useEffect(async () => {\r\n\r\n        if (userNow.id !== \"\") {\r\n            let response = await fetch('http://localhost:27017/orders/filterOrders', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ id: userNow.id, type: \"client\", status: [\"cart\", \"error\"] })\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            if (response.status === 200) {\r\n                setProductsFiltered(response2);\r\n            }\r\n\r\n            //check wich of the orders are with \"error\" status\r\n            let tempErr = [];\r\n            let tempValidOrders = [];\r\n\r\n            response2.forEach(order => {\r\n                if (order.order.status === \"error\" && !tempErr.includes(order.order.idItem)) {\r\n                    tempErr.push(order.order.idItem);\r\n                }\r\n                else if (order.order.status === \"cart\") {\r\n                    tempValidOrders.push(order);\r\n                }\r\n            });\r\n\r\n            setErrorProduct(tempErr);\r\n            setValidOrders(tempValidOrders);\r\n            setisLoad(true);\r\n\r\n        }\r\n\r\n\r\n    }, [userNow])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const deleteOrder = async (id) => {\r\n        //delete order from the db and from the cart in view\r\n        await fetch('http://localhost:27017/orders/deleteOrderByProduct', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ idItem: id, idClient: userNow.id })\r\n        });\r\n\r\n        let index = validOrders.findIndex((elem) => elem.order.idItem === id);\r\n        validOrders.splice(index, 1);\r\n        let tempValidOrders = [...validOrders]\r\n\r\n        index = productsFiltered.findIndex((elem) => elem.order.idItem === id);\r\n        productsFiltered.splice(index, 1);\r\n        let tempProducts = [...productsFiltered]\r\n        setProductsFiltered(tempProducts);\r\n        setValidOrders(tempValidOrders);\r\n        setisLoad(true);\r\n    }\r\n\r\n    //go to payment\r\n    function goToPay() {\r\n        if (closePopover !== undefined) closePopover();\r\n        history.push(\"/ShippingDetails\");\r\n        setUrl(\"/ShippingDetails\");\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"cart\">\r\n            {userNow.id != \"\" &&\r\n                <div>\r\n                    {!isLoad && <div className=\"loader\"></div>}\r\n                    <div className=\"product-container\">\r\n                        <ProductList\r\n                            productDetailsArray={productsFiltered}\r\n                            size=\"smallest\"\r\n                            userNow={userNow}\r\n                            type={\"cart\"}\r\n                            functionButton={async (id) => { await deleteOrder(id); }}\r\n                            errorProducts={errorProducts}\r\n                        />\r\n                    </div>\r\n                    {validOrders.length !== 0 && productsFiltered.length !== 0 &&\r\n                        <button onClick={() => { goToPay(); }} className=\"pay-button\">לתשלום</button>}\r\n                    {\r\n                        ( productsFiltered.length === 0&& isLoad) &&\r\n                        <h5>העגלה שלך ריקה</h5>\r\n                    }\r\n                </div>\r\n            }\r\n            {userNow.id === \"\" &&\r\n\r\n                <h5>אינך מחובר</h5>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\UserAccount\\UserAccount.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Shared\\UsesFunction.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Login\\Login.js",["196","197","198","199"],"import React, { useState, useEffect } from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { validUserPassword, validUserId, validId } from '../InputForm/Validation.js'\r\n\r\nimport InputForm from '../InputForm/InputForm'\r\n\r\nimport './Login.css'\r\n\r\nfunction Login(props) {\r\n\r\n    let changeUser = props.changeUser;\r\n    let setUrl = props.setUrl;\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [sumbit, setSumbit] = useState(false);\r\n    const [sumbitModal, setSumbitModal] = useState(false);\r\n    const [validUser, setValidUser] = useState(\"\");\r\n    let history = useHistory();\r\n    //varieble to store and validate the data of login\r\n    const numInputs = 2;\r\n    let numSuccess = 0;\r\n    let dataIdPassword = [\"\", \"\"];\r\n\r\n    //variable to store and validate the data of password recover\r\n    let idRecover = \"\";\r\n    let successModal = false;\r\n    const [existUser, setExistUser] = useState(true);\r\n    const [emailSend, setEmailSend] = useState(false)\r\n\r\n    useEffect(async () => {\r\n        if (sumbit === true) {\r\n            //returns the sumbit to false for allow pressing the button again\r\n            setSumbit(false);\r\n            //if all the inputs return ok- no errors\r\n            if (numSuccess === numInputs) {\r\n                let response = await fetch('http://localhost:27017/users/login', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        id: dataIdPassword[0],\r\n                        password: dataIdPassword[1]\r\n                    }\r\n                });\r\n\r\n                let responseMessage = await response.json();\r\n                if (response.status === 200) {\r\n                    changeUser(responseMessage);\r\n                    history.push(\"/\");\r\n                    setUrl(\"/\");\r\n                }\r\n                else {\r\n                    if (responseMessage.err === \"idError\") {\r\n                        setValidUser(\"משתמש לא קיים, עליך להרשם תחילה\");\r\n                    }\r\n                    else if (responseMessage.err === \"passwordError\") {\r\n                        setValidUser(\"סיסמה לא נכונה\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [sumbit])\r\n\r\n    useEffect(async () => {\r\n        //make password recovery\r\n        if (sumbitModal === true) {\r\n            setSumbitModal(false);\r\n            if (successModal) {\r\n                let response = await fetch('http://localhost:27017/users/passwordRecovery', {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({id:idRecover})\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                    setEmailSend(true);\r\n                }\r\n                else {\r\n                    setExistUser(false);\r\n                    return;\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n    }, [sumbitModal])\r\n\r\n\r\n    const handelSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSumbit(true);\r\n    }\r\n\r\n    function wasSuccessAdd() {\r\n        numSuccess++;\r\n    }\r\n\r\n    function wasSuccessModal() {\r\n        successModal = true;\r\n    }\r\n\r\n    function validModalId(data) {\r\n        let validIdData = validId(data);\r\n        if (validIdData !== \"\") return validIdData;\r\n        idRecover = data;\r\n        return \"\";\r\n    }\r\n\r\n    function saveDetails(data, nameInput) {\r\n        if (nameInput === \"Id\") dataIdPassword[0] = data;\r\n        else dataIdPassword[1] = data;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"bg-img\">\r\n\r\n            <div >\r\n                <form onSubmit={handelSubmit} className=\"container1\">\r\n                    <h2 className=\"header\"><b> התחברות  </b></h2>\r\n                    <small>{validUser}</small>\r\n                    <InputForm\r\n                        nameComp=\"תעודת זהות\"\r\n                        type={\"text\"}\r\n                        validationFunction={(data) => { return validUserId(data, saveDetails); }}\r\n                        sumbited={sumbit}\r\n                        wasSuccess={() => { wasSuccessAdd(); }}\r\n                    />\r\n\r\n                    <InputForm\r\n                        nameComp=\"סיסמה\"\r\n                        type={\"password\"}\r\n                        validationFunction={(data) => { return validUserPassword(data, saveDetails); }}\r\n                        sumbited={sumbit}\r\n                        wasSuccess={() => { wasSuccessAdd(); }}\r\n                    />\r\n\r\n                    <button type=\"submit\" className=\"btn1\">התחבר</button>\r\n\r\n                    <div className=\"password-recovery\" onClick={() => { setShowModal(true); }}>\r\n                        <small>שכחת סיסמה?</small>\r\n                    </div>\r\n                </form>\r\n\r\n                <div className=\"password-recovery-modal\">\r\n                    <Modal\r\n                        show={showModal}\r\n                        onHide={() => {\r\n                            setShowModal(false);\r\n                            if(emailSend){\r\n                                setEmailSend(false);\r\n                            }\r\n                        }}\r\n                        size=\"gr\"\r\n                        aria-labelledby=\"example-modal-sizes-title-gr\"\r\n                        className=\"recov-modal\"\r\n                    >\r\n                        <Modal.Body className=\"recov-body\">\r\n\r\n                            {!emailSend && <div>\r\n                                <h4 className=\"recov-title\">שיחזור סיסמה</h4>\r\n                                <div className=\"input-recov\">\r\n                                    <InputForm\r\n                                        nameComp=\"מספר תעודת הזהות באמצעותו נרשמת לאתר\"\r\n                                        type={\"text\"}\r\n                                        validationFunction={(data) => { return validModalId(data); }}\r\n                                        sumbited={sumbitModal}\r\n                                        wasSuccess={() => { wasSuccessModal(); }}\r\n                                    />\r\n                                </div>\r\n                                {!existUser && <h6>משתמש לא קיים במערכת</h6>}\r\n\r\n                                <button onClick={() => { setSumbitModal(true); }} >שלח לי סיסמה</button>\r\n                            </div>}\r\n\r\n                            {emailSend && <div>\r\n                                <h4>נשלחה אליך סיסמה חדשה במייל</h4>\r\n                            </div>}\r\n\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Login","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Seller\\Seller.js",["200","201","202","203","204"],"import React, { useEffect, useState } from 'react'\r\nimport ProductList from '../ProductsList/ProductsList.js'\r\nimport Message from '../Message/Message.js';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Seller.css'\r\n\r\n\r\nexport default function Seller(props) {\r\n\r\n    const userNow = props.userNow;\r\n    let setUrl = props.setUrl;\r\n    let history = useHistory();\r\n\r\n    const [myProducts, setMyProducts] = useState([]);\r\n    const [productsInOrder, setProductsInOrder] = useState([]);\r\n    const [isLoad1, setIsLoad1] = useState(false);\r\n    const [isLoad2, setIsLoad2] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    useEffect(async () => {\r\n        setIsLoad1(false);\r\n        setIsLoad2(false);\r\n        if (userNow.id != \"\") {\r\n            //filter the orders from the seller\r\n            let response = await fetch('http://localhost:27017/orders/filterOrders', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                , body: JSON.stringify({ id: userNow.id, type: \"seller\", status: [\"paid\"] })\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            if (response.status === 200) {\r\n                setProductsInOrder(response2);\r\n                setIsLoad1(true);\r\n            }\r\n\r\n            else {\r\n                setMessage(response2.err);\r\n                setShowAlert(true);\r\n            }\r\n\r\n            //get all the products the seller sells\r\n            response = await fetch('http://localhost:27017/products/getProductsByUser/' + userNow.id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            response2 = await response.json();\r\n            if (response.status === 200) {\r\n                setMyProducts(response2);\r\n                setIsLoad2(true);\r\n            }\r\n            else {\r\n                setMessage(response2.err);\r\n                setShowAlert(true);\r\n            }\r\n\r\n        }\r\n    }, [userNow])\r\n\r\n    async function updateDelieverProduct(id) {\r\n        //update the product deliever to the user\r\n        let response = await fetch('http://localhost:27017/orders/updateOrder', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n            , body: JSON.stringify({\r\n                status: \"deliever\",\r\n                idSeller: userNow.id,\r\n                idItem: id\r\n            })\r\n        });\r\n\r\n        if (response.status == 200) {\r\n            let index = productsInOrder.findIndex((elem) => elem.order.idItem === id);\r\n            productsInOrder.splice(index, 1);\r\n            let tempProductsInOrder = [...productsInOrder];\r\n            setProductsInOrder(tempProductsInOrder);\r\n            setIsLoad1(true);\r\n        }\r\n        else {\r\n            let response2 = await response.json();\r\n            setMessage(response2.err);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function goToUpdateProduct(id) {\r\n        history.push({\r\n            pathname: '/updateProduct',\r\n            id: id\r\n        });\r\n        setUrl(\"/updateProduct\");\r\n    }\r\n\r\n    function goToAddProduct() {\r\n        if (userNow.bankNumber === \"\") {\r\n            history.push(\"/signAccount\");\r\n            setUrl(\"/signAccount\");\r\n        }\r\n        else {\r\n            history.push(\"/ProductDetails\");\r\n            setUrl(\"/ProductDetails\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Seller\">\r\n            <div className=\"order\">\r\n                <h4 className=\"h4-seller\">מוצרים שהוזמנו ממני</h4>\r\n                <div className=\"ordered\">\r\n                    {!isLoad1 &&\r\n                        <div className=\"loaderContaine\">\r\n                            <div className=\"loader\"></div>\r\n                        </div>\r\n                    }\r\n                    <ProductList\r\n                        type=\"sent\"\r\n                        functionButton={async (id) => { await updateDelieverProduct(id); }}\r\n                        productDetailsArray={productsInOrder}\r\n                        size=\"smallest\"\r\n                        userNow={userNow}\r\n                    />\r\n                    {productsInOrder.length == 0 && isLoad1 &&\r\n                        <h5 className=\"h5-seller\">אין מוצרים שהוזמנו ממך</h5>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"all\">\r\n                <h4 className=\"h4-seller\">כל המוצרים שאני מוכר</h4>\r\n                {!isLoad2 && <div className=\"loader\"></div>}\r\n                <ProductList\r\n                    productDetailsArray={myProducts}\r\n                    type=\"seller\"\r\n                    functionButton={(id) => { goToUpdateProduct(id); }}\r\n                    size=\"small1\"\r\n                    userNow={userNow}\r\n                />\r\n                {myProducts.length == 0 && isLoad2 &&\r\n                    <h5 className=\"h5-seller\">חבל :( עדיין לא העלית מוצרים לאתר</h5>\r\n                }\r\n                <div className=\"add\">\r\n\r\n                    <button className=\"add-button\" onClick={() => { goToAddProduct(); }}>\r\n                        <span className=\"add-icon\">\r\n                            <i className=\"fas fa-plus\"></i>\r\n                        </span>\r\n                        <p>הוסף</p>\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                    }\r\n                    } />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Client\\Client.js",["205","206","207","208"],"import React, { useEffect, useState } from 'react'\r\nimport ProductList from '../ProductsList/ProductsList'\r\nimport Cart from '../Cart/Cart'\r\nimport './Client.css'\r\nimport Message  from '../Message/Message'\r\n\r\nexport default function Client(props) {\r\n    let userNow = props.userNow;\r\n    let setUrl = props.setUrl;\r\n    const [productsInOrder, setProductsInOrder] = useState([]);\r\n    const [isLoad, setIsLoad] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    //load the data\r\n    useEffect(async () => {\r\n        setIsLoad(false);\r\n        if (userNow.id != \"\") {\r\n            //get the orders that the client wait for\r\n            let response = await fetch('http://localhost:27017/orders/filterOrders', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                , body: JSON.stringify({ id: userNow.id, type: \"client\", status: [\"paid\",\"deliever\"] })\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            if (response.status === 200) {\r\n                setProductsInOrder(response2);\r\n            }\r\n\r\n            else {\r\n                setMessage(response2.err);\r\n                setShowAlert(true);\r\n            }\r\n            setIsLoad(true);\r\n        }\r\n    }, [userNow.id])\r\n\r\n    //update that the order complate- arrive to the user\r\n    async function updateRecieveProduct(id) {\r\n        let response = await fetch('http://localhost:27017/orders/updateOrder', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n            , body: JSON.stringify({\r\n                status: \"received\",\r\n                idClient: userNow.id,\r\n                idItem: id\r\n            })\r\n        });\r\n\r\n        if (response.status == 200) {\r\n            let index = productsInOrder.findIndex((elem) => elem.order.idItem === id);\r\n            productsInOrder.splice(index, 1);\r\n            let tempProductsInOrder = [...productsInOrder];\r\n            setProductsInOrder(tempProductsInOrder);\r\n            setIsLoad(true);\r\n        }\r\n        else{\r\n            let response2=await response.json();\r\n            setMessage(response2.err);\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Client\">\r\n            <div className=\"cart-container\">\r\n                <h4 className=\"Client-h4\">עגלת הקניות</h4>\r\n                <div className=\"cart-client\">\r\n                    <Cart userNow={userNow} className=\"cart-client\" setUrl={(url) => { setUrl(url); }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"order-container\">\r\n                <h4 className=\"Client-h4\">מוצרים בהזמנה</h4>\r\n                <div className=\"ordered-client\">\r\n                    {!isLoad && <div className=\"loader\"></div>}\r\n                    <ProductList\r\n                        type=\"paid\"\r\n                        functionButton={async (id) => { await updateRecieveProduct(id); }}\r\n                        productDetailsArray={productsInOrder}\r\n                        size=\"smallest\"\r\n                        userNow={userNow}\r\n                    />\r\n                     {productsInOrder.length == 0 && isLoad &&\r\n                        <h5 className=\"h5-seller\">אין לך מוצרים באמצע הזמנה</h5>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                    }\r\n                    }/>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Paypal\\Paypal.js",["209"],"import React from 'react';\r\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\r\n//take from https://www.npmjs.com/package/react-paypal-express-checkout\r\nexport default class MyApp extends React.Component {\r\n    render() {\r\n        const onSuccess = (payment) => {\r\n            // Congratulation, it came here means everything's fine!\r\n            this.props.makePay();\r\n            console.log(\"The payment was succeeded!\", payment);\r\n            // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n        }\r\n\r\n        const onCancel = (data) => {\r\n            // User pressed \"cancel\" or close Paypal's popup!\r\n            console.log('The payment was cancelled!', data);\r\n            // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n        }\r\n\r\n        const onError = (err) => {\r\n            // The main Paypal's script cannot be loaded or somethings block the loading of that script!\r\n            console.log(\"Error!\", err);\r\n            // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n            // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n        }\r\n\r\n        let env = 'sandbox'; // you can set here to 'production' for production\r\n        let currency = 'ILS'; // or you can set this value from your props or state\r\n        let total = 1; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\r\n        // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\r\n\r\n        const client = {\r\n            sandbox: 'AXDJ7_PtbScsY7_OXa0N6Lfanc7IjpJy_UsPK6cDpm-BP5vCP_0sauPT0xSrgrWXodIvf7ok-yqDkgx1',\r\n            production: 'YOUR-PRODUCTION-APP-ID',\r\n        }\r\n        // In order to get production's app-ID, you will have to send your app to Paypal for approval first\r\n        // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\r\n        //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\r\n        // For production app-ID:\r\n        //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\r\n\r\n        // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\r\n        return (\r\n            <PaypalExpressBtn env={env} client={client} currency={currency} total={this.props.total} onError={onError} onSuccess={onSuccess} onCancel={onCancel} />\r\n        );\r\n    }\r\n}","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Furniture\\Furinture.js",["210","211","212"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport ProductList from '../../ProductsList/ProductsList.js'\r\nimport Paging from '../Paging/Paging.js';\r\nimport './Furinture.css'\r\nexport default function Furinture(props) {\r\n\r\n    let category = props.category;\r\n    let types = props.types;\r\n    let cities = props.cities;\r\n    let colors = props.colors;\r\n    let price = props.price;\r\n    let quality = props.quality;\r\n    let userNow = props.userNow;\r\n    const [products, setProducts] = useState([]);\r\n    const [size, setSize] = useState(0);\r\n    const [skip, setSkip] = useState(0);\r\n    const [isLoad, setIsLoad] = useState(false);\r\n\r\n    //save the previous category- in order to nullify the skip when the catgory changed\r\n    const prevCategorytRef = useRef();\r\n    useEffect(() => {\r\n        prevCategorytRef.current = category;\r\n    });\r\n    const prevCategory = prevCategorytRef.current;\r\n    //load data\r\n\r\n    useEffect(async () => {\r\n        setIsLoad(false);\r\n        let skipTemp = skip;\r\n        if (prevCategory !== category) {\r\n            setSkip(0);\r\n            skipTemp = 0;\r\n        }\r\n        //prepare the filter parameters\r\n        let filterParam = {};\r\n        if (types.length !== 0) {\r\n            filterParam.typesArray = types;\r\n        }\r\n        if (colors.length !== 0) {\r\n            filterParam.colorsArray = colors;\r\n        }\r\n        if (price.length !== 0) {\r\n            filterParam.priceArray = price;\r\n        }\r\n        if (quality.length !== 0) {\r\n            filterParam.qualityArray = quality;\r\n        }\r\n        if (cities.length !== 0) {\r\n            filterParam.citiesArray = cities;\r\n        }\r\n\r\n        filterParam = {\r\n            category: category,\r\n            ...filterParam,\r\n            statusArray: [\"true\"],\r\n            skip: skipTemp\r\n        }\r\n\r\n        if (filterParam.citiesArray != undefined) {\r\n            filterParam.projectionSeller = { _id: 0, city: 1 };\r\n            filterParam.projectionProduct = { name: 1, price: 1, mainImgSrc: 1, idSeller: 1 };\r\n        }\r\n        else {\r\n            filterParam.projectionProduct = { name: 1, price: 1, mainImgSrc: 1 };\r\n        }\r\n\r\n        //get the products \r\n        let response = await fetch('http://localhost:27017/products/filterProducts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(filterParam)\r\n        });\r\n\r\n        let response2 = await response.json();\r\n        if (response.status === 200) {\r\n            setProducts(response2.productsList);\r\n            setSize(response2.size)\r\n        }\r\n        else {\r\n            console.log(response2.err);\r\n        }\r\n\r\n        setIsLoad(true);\r\n\r\n    }, [category, cities, types, colors, price, quality, skip]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {(!isLoad) && <div className=\"loader\"></div>}\r\n            <div className=\"productArea\">\r\n                <ProductList userNow={userNow} productDetailsArray={products} size=\"small2\" />\r\n            </div>\r\n            <div className=\"pagingArea\">\r\n                <Paging size={size} changeSkip={(i) => { setSkip(i) }} skipNow={skip} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Filter\\FilterB.js",["213"],"import React, { useEffect, useState } from 'react'\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './FilterB.css'\r\nexport default function FilterB(props) {\r\n\r\n    const [colors, setColors] = useState(props.colors);\r\n    const [types, setTypes] = useState(props.types);\r\n    const [cities, setCities] = useState(props.cities);\r\n    const [quality, setQuality] = useState(props.quality);\r\n    const changeArrays = props.changeArrays;\r\n    const [priceAdd, setPriceAdd] = useState(props.price);\r\n\r\n    let maxPrice = props.price[1];\r\n    const [typesAdd, setTypesAdd] = useState(props.typesChecked);\r\n    const [citiesAdd, setCitiesAdd] = useState(props.citiesChecked);\r\n    const [colorsAdd, setColorsAdd] = useState(props.colorsChecked);\r\n    const [qualityAdd, setQualityAdd] = useState(props.qualityChecked);\r\n    const isLoad=props.isLoad;\r\n    \r\n    useEffect(() => {\r\n        setColors(props.colors);\r\n        setTypes(props.types);\r\n        setCities(props.cities);\r\n        setPriceAdd(props.price);\r\n        setQuality(props.quality);\r\n        props.setIsLoad(true);\r\n    }, [props.colors, props.types, props.cities, props.price, props.quality])\r\n\r\n\r\n    //style the range\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            color: '#abb663'\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    //Indicates that the check box checked\r\n    function chooseInput(item, input) {\r\n        let array;\r\n        let setArray;\r\n        switch (input) {\r\n            case \"types\":\r\n                array = typesAdd.slice();\r\n                setArray = setTypesAdd;\r\n                break;\r\n            case \"cities\":\r\n                array = citiesAdd.slice();\r\n                setArray = setCitiesAdd;\r\n                break;\r\n            case \"colors\":\r\n                array = colorsAdd.slice();\r\n                setArray = setColorsAdd;\r\n                break;\r\n            case \"quality\":\r\n                array = qualityAdd.slice();\r\n                setArray = setQualityAdd;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (array.includes(item)) array.splice(array.indexOf(item), 1);\r\n        else array.push(item);\r\n        setArray(array);\r\n\r\n        switch (input) {\r\n            case \"types\":\r\n                changeArrays(citiesAdd, array, colorsAdd, priceAdd, qualityAdd);\r\n                break;\r\n            case \"cities\":\r\n                changeArrays(array, typesAdd, colorsAdd, priceAdd, qualityAdd);\r\n                break;\r\n            case \"colors\":\r\n                changeArrays(citiesAdd, typesAdd, array, priceAdd, qualityAdd);\r\n                break;\r\n            case \"quality\":\r\n                changeArrays(citiesAdd, typesAdd, colorsAdd, priceAdd, array);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    function createElementCheck(item, input, index) {\r\n        let array;\r\n        switch (input) {\r\n            case \"types\":\r\n                array = typesAdd;\r\n                break;\r\n            case \"cities\":\r\n                array = citiesAdd;\r\n                break;\r\n            case \"colors\":\r\n                array = colorsAdd;\r\n                break;\r\n            case \"quality\":\r\n                array = qualityAdd;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div key={index} className=\"filter-check-box\">\r\n                {\r\n                    <label className=\"container-check\">{item}\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            onChange={() => {\r\n                                chooseInput(item, input)\r\n                            }}\r\n                            checked={array.includes(item)} />\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"filterB\">\r\n            <form className=\"form\">\r\n            {(!isLoad) && <div className=\"loader\"></div>}\r\n               \r\n                <div className=\"key-filter\">\r\n                    <label className=\"title\">צבעים</label>\r\n                    <div className=\"filter-value\">\r\n                        {colors.map((color, index) => {\r\n                            return createElementCheck(color, \"colors\", index);\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"key-filter\">\r\n                    <label className=\"title\">סוגים</label>\r\n                    <div className=\"filter-value\">\r\n                        {types.map((type, index) => {\r\n                            return createElementCheck(type, \"types\", index);\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"key-filter\">\r\n                    <label className=\"title\">ערים</label>\r\n                    <div className=\"filter-value\">\r\n                        {cities.map((city, index) => {\r\n                            return createElementCheck(city, \"cities\", index);\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"key-filter\">\r\n                    <label className=\"title\">מצב מוצר</label>\r\n                    <div className=\"filter-value\">\r\n                        {quality.map((quality, index) => {\r\n                            return createElementCheck(quality, \"quality\", index);\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"key-filter\">\r\n                    <label className=\"title\">מחיר</label>\r\n                    <div className=\"slide\">\r\n                        <Slider\r\n                            classes={{\r\n                                root: classes.root\r\n                            }}\r\n                            max={maxPrice}\r\n                            value={priceAdd}\r\n                            onChange={(event, newValue) => {\r\n                                setPriceAdd(newValue);\r\n                            }}\r\n                            onChangeCommitted={(event, newValue) => {\r\n                                changeArrays(citiesAdd, typesAdd, colorsAdd, newValue, qualityAdd);\r\n                            }}\r\n                            valueLabelDisplay=\"auto\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\ProductsList\\ProductsList.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\CategoryProduct\\Paging\\Paging.js",[],"C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Product\\Product.js",["214","215","216","217"],"import React, { useState } from 'react'\r\n\r\nimport './Product.css'\r\nimport ProductBig from './ProductBig/ProductBig'\r\n\r\nfunction Product(props) {\r\n\r\n    const productFullDetails = props.productDetails;\r\n    const productDetails=productFullDetails.product;\r\n    const type = props.type;\r\n    const userNow = props.userNow;\r\n    const errorProducts = props.errorProducts;\r\n    const [size, setSize] = useState(props.size);\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n\r\n    const handleShow = () => {\r\n        setShowModal(true);\r\n    }\r\n\r\n    //change the product view size\r\n    function changeSize() {\r\n\r\n        switch (size) {\r\n            case \"smallest\":\r\n                handleShow();\r\n                setSize(\"bigWithOutBtn1\");\r\n                break;\r\n            case \"small1\":\r\n                handleShow();\r\n                setSize(\"bigWithOutBtn2\");\r\n                break;\r\n            case \"small2\":\r\n                handleShow();\r\n                setSize(\"bigWithBtn\");\r\n                break;\r\n            case \"bigWithOutBtn1\":\r\n                setSize(\"smallest\");\r\n                break;\r\n            case \"bigWithOutBtn2\":\r\n                setSize(\"small1\");\r\n                break;\r\n            case \"bigWithBtn\":\r\n                setSize(\"small2\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    //Shortens the text if it is longer than the space assigned to it in the small card\r\n    function makeShortText(text, maxLength) {\r\n        if (text === null || text === undefined) return \"\";\r\n        if (text.length <= maxLength) return text;\r\n        let array = text.split(\" \");\r\n        let newText = \"\";\r\n        let returnText = \"\";\r\n        for (let i = 0; i < array.length; i++) {\r\n            if ((newText + \" \" + array[i]).length <= maxLength - 3) {\r\n                newText = newText + \" \" + array[i];\r\n                returnText = newText;\r\n            }\r\n            else {\r\n                newText = \"...\" + newText;\r\n                returnText = newText;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (returnText === \"...\") returnText = \"...\" + text.slice(0, maxLength - 3);\r\n        return returnText;\r\n    }\r\n\r\n    return (\r\n        <div className=\"product\">\r\n\r\n            {\r\n                productDetails._id !== \"\" &&(size === \"smallest\" || size === \"bigWithOutBtn1\") &&\r\n                <div onClick={() => changeSize()} className=\"card\">\r\n                    <div className={\"card-body\", \"small-body\"}>\r\n                        <h4 className={\"card-title\", \"small2h4\"}>{productDetails.name}</h4>\r\n\r\n                        <p className={\"card-text\", \"small2p\"}>\r\n                            {makeShortText(productDetails.description, 103)}\r\n                        </p>\r\n\r\n\r\n                        <p className={\"price2\"}>&#8362; {productDetails.price}</p>\r\n                        {\r\n                            type === \"cart\" && errorProducts.includes(productDetails._id) &&\r\n                            <small>המוצר הוסר ע\"י המוכר ואינו זמין יותר לרכישה</small>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                productDetails._id !== \"\" &&\r\n                (size === \"small1\" || size === \"small2\" || size === \"bigWithOutBtn2\" || size === \"bigWithBtn\") &&\r\n                <div onClick={() => changeSize()} className=\"card\">\r\n                    <img src={productDetails.mainImgSrc} className={\"card-img-top\"} />\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\">{makeShortText(productDetails.name, 23)}</h4>\r\n                        <p className=\"price\">&#8362; {productDetails.price}</p>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                productDetails._id !== \"\" && \r\n                (size === \"bigWithOutBtn1\" || size === \"bigWithOutBtn2\" || size === \"bigWithBtn\") &&\r\n\r\n                <ProductBig\r\n                    userNow={userNow}\r\n                    productDetails={productDetails}\r\n                    type={type}\r\n                    errorProducts={errorProducts}\r\n                    showModal={showModal}\r\n                    setShowModal={(show) => { setShowModal(show); }}\r\n                    size={size}\r\n                    changeSize={()=>{changeSize();}} />\r\n            }\r\n\r\n            {\r\n                (productDetails._id === \"\" ) &&\r\n                <div>\r\n                    <h3>מוצר לא נמצא</h3>\r\n                </div>\r\n            }\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Product","C:\\Users\\tzviya\\Documents\\Furnish\\FURNISH\\client\\src\\components\\Product\\ProductBig\\ProductBig.js",["218","219","220","221","222"],"import React, { useState, useEffect } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport Message from '../../Message/Message'\r\nimport '../Product.css'\r\nimport './ProductBig.css'\r\n\r\nexport default function ProductBig(props) {\r\n\r\n    const type = props.type;\r\n    const userNow = props.userNow;\r\n    const errorProducts = props.errorProducts;\r\n    const showModal = props.showModal;\r\n    const setShowModal = props.setShowModal;\r\n    const size = props.size;\r\n    const changeSize = props.changeSize;\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [typeMessage, setTypeMessage] = useState(\"\");\r\n    const [sellerDetails, setSellerDetails] = useState({});\r\n    const [myOrder, setMyOrder] = useState({});\r\n    const [productDetails, setProductDetails] = useState(props.productDetails)\r\n    \r\n    const handleClose1 = () => {\r\n        setShowModal(false);       \r\n    }\r\n\r\n    const handleClose2 = () => {\r\n        setShowModal(false); \r\n        changeSize();      \r\n    }\r\n\r\n    useEffect(async () => {\r\n        //get the data of the product\r\n        if (type !== \"sent\" && type !== \"paid\") {\r\n            let response = await fetch('http://localhost:27017/products/getProduct', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ \"id\": productDetails._id },{})\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            console.log(response2);\r\n            if (response.status === 200) {\r\n                setProductDetails(response2.product)\r\n                setSellerDetails(response2.sellerDetails);\r\n            }\r\n        }\r\n\r\n        if (type === \"sent\" || type === \"paid\") {\r\n            //get the data of the order of the product\r\n            let response = await fetch('http://localhost:27017/orders/getOrderByProduct/' + productDetails._id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            let response2 = await response.json();\r\n            console.log(response2);\r\n            if (response.status === 200) {\r\n                setProductDetails(response2.product);\r\n                setMyOrder(response2);\r\n                setSellerDetails(response2.sellerDetails);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    const makeOrder = async () => {\r\n        //create a new order\r\n        if (userNow.id === \"\") {\r\n           \r\n            setMessage(\"אינך מחובר לאתר\");\r\n            setShowAlert(true);\r\n            handleClose1();\r\n            return;\r\n        }\r\n        let newOrder = {};\r\n        newOrder.idItem = productDetails._id;\r\n        newOrder.idSeller = sellerDetails.id;\r\n        newOrder.idClient = userNow.id;\r\n        if (newOrder.idClient == newOrder.idSeller) {\r\n           \r\n            setMessage(\"לא ניתן להזמין מוצר שאתה המוכר שלו\");\r\n            setShowAlert(true);\r\n            handleClose1();\r\n            return;\r\n        }\r\n        let response = await fetch('http://localhost:27017/orders/addOrder', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newOrder)\r\n        });\r\n\r\n        let response2 = await response.text();\r\n        if (response.status === 200) {\r\n            \r\n            setMessage(\"המוצר נוסף בהצלחה\");\r\n            setShowAlert(true);\r\n            setTypeMessage(\"success\");\r\n            handleClose1();\r\n        }\r\n        else {\r\n            \r\n            setMessage(response2);\r\n            setShowAlert(true);\r\n            handleClose1();\r\n            return;\r\n        }\r\n    }\r\n\r\n    //return the products full details\r\n    return (\r\n        <div>\r\n\r\n            <Modal\r\n                show={showModal}\r\n                onHide={handleClose2}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"modal\"\r\n            >\r\n\r\n                <Modal.Body className=\"product-modal-body\">\r\n                    {(sellerDetails.id != undefined) && <div className=\"card-modal\">\r\n                        <div>\r\n                            <img src={productDetails.mainImgSrc} className=\"card-modal-img\" />\r\n                        </div>\r\n                        <div className=\"card-modal-text\">\r\n                            <h4><b>{productDetails.name}</b></h4>\r\n                            <div className=\"descContainer\">\r\n                            <p className=\"desc\">{productDetails.description}</p>\r\n                            </div>\r\n                            {type === \"sent\" && myOrder !== null &&\r\n                                <div>\r\n                                    <h6>פרטי הזמנה</h6>\r\n                                    <p>\r\n                                        <b>שם לקוח </b>\r\n                                        <div className=\"values\">{myOrder.clientDetails.firstName} {myOrder.clientDetails.lastName}</div>\r\n                                    </p>\r\n                                    <p>\r\n                                        <b>פלאפון לקוח </b>\r\n                                        <div className=\"values\">{myOrder.clientDetails.phone}</div>\r\n                                    </p>\r\n                                    <p>\r\n                                        <b>כתובת למשלוח </b>\r\n                                        <div className=\"values\">{myOrder.order.city}, {myOrder.order.address} {myOrder.order.buildingNumber} / {myOrder.order.homeNumber}</div>\r\n                                    </p>\r\n\r\n                                </div>\r\n                            }\r\n\r\n                            {type !== \"sent\" && < div >\r\n                                <p><b>עיר </b> <div className=\"values\">{sellerDetails.city}</div></p>\r\n                                <p><b>מצב המוצר </b> <div className=\"values\">{productDetails.quality}</div></p>\r\n                                <p><b>צבע </b> <div className=\"values\">{productDetails.color}</div></p>\r\n                                <h6>פרטי התקשרות עם המוכר </h6>\r\n                                <p><b>שם </b> <div className=\"values\">{sellerDetails.firstName} {sellerDetails.lastName}</div></p>\r\n                                <p><b>טלפון </b><div className=\"values\">{sellerDetails.phone}</div></p>\r\n\r\n                                {type === \"paid\" && myOrder !== null &&\r\n                                    <p><b>מצב הזמנה</b><div className=\"values\">\r\n                                        {(myOrder.order.status === \"paid\") ? \"שולם\" : (myOrder.order.status === \"deliever\") ? \"נשלח\" : \"התקבל\"}\r\n                                    </div></p>}\r\n                                <p className=\"price\"> {productDetails.price} &#8362;</p>\r\n\r\n                            </div>}\r\n                            {\r\n                                type === \"cart\" && errorProducts.includes(productDetails.id) &&\r\n                                <small>המוצר הוסר ע\"י המוכר ואינו זמין יותר לרכישה</small>\r\n                            }\r\n                        </div>\r\n                        {\r\n                            productDetails.id !== \"\" && sellerDetails.id !== \"\" && size === \"bigWithBtn\" &&\r\n                            <div className=\"button-container\">\r\n                                <button onClick={async () => { makeOrder(); }}>הוסף לעגלה</button>\r\n                            </div>\r\n                        }\r\n\r\n                    </div>}\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            {\r\n                showAlert && <Message\r\n                    showAlert={showAlert}\r\n                    message={message}\r\n                    onClose={() => {\r\n                        setShowAlert(false);\r\n                        setTypeMessage(\"\");\r\n                        changeSize();\r\n                    }\r\n                    }\r\n                    type={typeMessage} />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":42,"column":13,"nodeType":"229","endLine":58,"endColumn":4},{"ruleId":"230","severity":1,"message":"231","line":51,"column":27,"nodeType":"232","messageId":"233","endLine":51,"endColumn":29},{"ruleId":"234","severity":1,"message":"235","line":219,"column":68,"nodeType":"236","endLine":219,"endColumn":83},{"ruleId":"237","severity":1,"message":"238","line":193,"column":25,"nodeType":"239","endLine":193,"endColumn":102},{"ruleId":"240","severity":1,"message":"241","line":193,"column":33,"nodeType":"242","messageId":"243","endLine":193,"endColumn":54},{"ruleId":"227","severity":1,"message":"228","line":33,"column":15,"nodeType":"229","endLine":46,"endColumn":6},{"ruleId":"227","severity":1,"message":"244","line":46,"column":8,"nodeType":"245","endLine":46,"endColumn":16,"suggestions":"246"},{"ruleId":"230","severity":1,"message":"231","line":77,"column":28,"nodeType":"232","messageId":"233","endLine":77,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":27,"column":15,"nodeType":"229","endLine":30,"endColumn":6},{"ruleId":"227","severity":1,"message":"247","line":30,"column":8,"nodeType":"245","endLine":30,"endColumn":17,"suggestions":"248"},{"ruleId":"227","severity":1,"message":"228","line":32,"column":15,"nodeType":"229","endLine":57,"endColumn":6},{"ruleId":"227","severity":1,"message":"249","line":57,"column":8,"nodeType":"245","endLine":57,"endColumn":16,"suggestions":"250"},{"ruleId":"227","severity":1,"message":"228","line":23,"column":15,"nodeType":"229","endLine":33,"endColumn":6},{"ruleId":"227","severity":1,"message":"251","line":33,"column":8,"nodeType":"245","endLine":33,"endColumn":16,"suggestions":"252"},{"ruleId":"227","severity":1,"message":"228","line":34,"column":15,"nodeType":"229","endLine":49,"endColumn":6},{"ruleId":"230","severity":1,"message":"253","line":36,"column":24,"nodeType":"232","messageId":"233","endLine":36,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":44,"column":33,"nodeType":"232","messageId":"233","endLine":44,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":63,"column":29,"nodeType":"232","messageId":"233","endLine":63,"endColumn":31},{"ruleId":"230","severity":1,"message":"231","line":94,"column":29,"nodeType":"232","messageId":"233","endLine":94,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":109,"column":15,"nodeType":"229","endLine":132,"endColumn":6},{"ruleId":"227","severity":1,"message":"254","line":132,"column":8,"nodeType":"245","endLine":132,"endColumn":16,"suggestions":"255"},{"ruleId":"227","severity":1,"message":"228","line":68,"column":15,"nodeType":"229","endLine":89,"endColumn":6},{"ruleId":"227","severity":1,"message":"256","line":89,"column":8,"nodeType":"245","endLine":89,"endColumn":10,"suggestions":"257"},{"ruleId":"227","severity":1,"message":"258","line":94,"column":8,"nodeType":"245","endLine":94,"endColumn":18,"suggestions":"259"},{"ruleId":"227","severity":1,"message":"228","line":97,"column":15,"nodeType":"229","endLine":111,"endColumn":6},{"ruleId":"230","severity":1,"message":"231","line":102,"column":55,"nodeType":"232","messageId":"233","endLine":102,"endColumn":57},{"ruleId":"227","severity":1,"message":"260","line":111,"column":8,"nodeType":"245","endLine":111,"endColumn":16,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":116,"column":9,"nodeType":"264","messageId":"265","endLine":135,"endColumn":10},{"ruleId":"230","severity":1,"message":"231","line":270,"column":46,"nodeType":"232","messageId":"233","endLine":270,"endColumn":48},{"ruleId":"230","severity":1,"message":"231","line":270,"column":67,"nodeType":"232","messageId":"233","endLine":270,"endColumn":69},{"ruleId":"230","severity":1,"message":"231","line":284,"column":46,"nodeType":"232","messageId":"233","endLine":284,"endColumn":48},{"ruleId":"230","severity":1,"message":"231","line":284,"column":67,"nodeType":"232","messageId":"233","endLine":284,"endColumn":69},{"ruleId":"230","severity":1,"message":"231","line":310,"column":46,"nodeType":"232","messageId":"233","endLine":310,"endColumn":48},{"ruleId":"230","severity":1,"message":"231","line":310,"column":67,"nodeType":"232","messageId":"233","endLine":310,"endColumn":69},{"ruleId":"266","severity":1,"message":"267","line":377,"column":80,"nodeType":"268","messageId":"269","endLine":377,"endColumn":81},{"ruleId":"227","severity":1,"message":"228","line":25,"column":15,"nodeType":"229","endLine":71,"endColumn":6},{"ruleId":"227","severity":1,"message":"270","line":71,"column":8,"nodeType":"245","endLine":71,"endColumn":24,"suggestions":"271"},{"ruleId":"230","severity":1,"message":"253","line":14,"column":22,"nodeType":"232","messageId":"233","endLine":14,"endColumn":24},{"ruleId":"227","severity":1,"message":"272","line":24,"column":8,"nodeType":"245","endLine":24,"endColumn":18,"suggestions":"273"},{"ruleId":"230","severity":1,"message":"231","line":34,"column":18,"nodeType":"232","messageId":"233","endLine":34,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":61,"column":22,"nodeType":"232","messageId":"233","endLine":61,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":68,"column":34,"nodeType":"232","messageId":"233","endLine":68,"endColumn":36},{"ruleId":"230","severity":1,"message":"253","line":73,"column":42,"nodeType":"232","messageId":"233","endLine":73,"endColumn":44},{"ruleId":"227","severity":1,"message":"228","line":17,"column":15,"nodeType":"229","endLine":53,"endColumn":6},{"ruleId":"230","severity":1,"message":"253","line":94,"column":25,"nodeType":"232","messageId":"233","endLine":94,"endColumn":27},{"ruleId":"227","severity":1,"message":"228","line":31,"column":15,"nodeType":"229","endLine":63,"endColumn":6},{"ruleId":"227","severity":1,"message":"274","line":63,"column":8,"nodeType":"245","endLine":63,"endColumn":16,"suggestions":"275"},{"ruleId":"227","severity":1,"message":"228","line":65,"column":15,"nodeType":"229","endLine":89,"endColumn":6},{"ruleId":"227","severity":1,"message":"276","line":89,"column":8,"nodeType":"245","endLine":89,"endColumn":21,"suggestions":"277"},{"ruleId":"227","severity":1,"message":"228","line":21,"column":15,"nodeType":"229","endLine":64,"endColumn":6},{"ruleId":"230","severity":1,"message":"253","line":24,"column":24,"nodeType":"232","messageId":"233","endLine":24,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":80,"column":29,"nodeType":"232","messageId":"233","endLine":80,"endColumn":31},{"ruleId":"230","severity":1,"message":"231","line":132,"column":45,"nodeType":"232","messageId":"233","endLine":132,"endColumn":47},{"ruleId":"230","severity":1,"message":"231","line":149,"column":36,"nodeType":"232","messageId":"233","endLine":149,"endColumn":38},{"ruleId":"227","severity":1,"message":"228","line":15,"column":15,"nodeType":"229","endLine":38,"endColumn":6},{"ruleId":"230","severity":1,"message":"253","line":17,"column":24,"nodeType":"232","messageId":"233","endLine":17,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":54,"column":29,"nodeType":"232","messageId":"233","endLine":54,"endColumn":31},{"ruleId":"230","severity":1,"message":"231","line":87,"column":46,"nodeType":"232","messageId":"233","endLine":87,"endColumn":48},{"ruleId":"278","severity":1,"message":"279","line":28,"column":13,"nodeType":"280","messageId":"281","endLine":28,"endColumn":18},{"ruleId":"227","severity":1,"message":"228","line":27,"column":15,"nodeType":"229","endLine":87,"endColumn":6},{"ruleId":"230","severity":1,"message":"253","line":59,"column":37,"nodeType":"232","messageId":"233","endLine":59,"endColumn":39},{"ruleId":"227","severity":1,"message":"282","line":87,"column":8,"nodeType":"245","endLine":87,"endColumn":63,"suggestions":"283"},{"ruleId":"227","severity":1,"message":"284","line":28,"column":8,"nodeType":"245","endLine":28,"endColumn":77,"suggestions":"285"},{"ruleId":"266","severity":1,"message":"267","line":81,"column":48,"nodeType":"268","messageId":"269","endLine":81,"endColumn":49},{"ruleId":"266","severity":1,"message":"267","line":82,"column":52,"nodeType":"268","messageId":"269","endLine":82,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":84,"column":50,"nodeType":"268","messageId":"269","endLine":84,"endColumn":51},{"ruleId":"286","severity":1,"message":"287","line":101,"column":21,"nodeType":"239","endLine":101,"endColumn":87},{"ruleId":"227","severity":1,"message":"228","line":33,"column":15,"nodeType":"229","endLine":69,"endColumn":6},{"ruleId":"227","severity":1,"message":"288","line":69,"column":8,"nodeType":"245","endLine":69,"endColumn":10,"suggestions":"289"},{"ruleId":"230","severity":1,"message":"231","line":85,"column":31,"nodeType":"232","messageId":"233","endLine":85,"endColumn":33},{"ruleId":"230","severity":1,"message":"253","line":131,"column":40,"nodeType":"232","messageId":"233","endLine":131,"endColumn":42},{"ruleId":"286","severity":1,"message":"287","line":133,"column":29,"nodeType":"239","endLine":133,"endColumn":95},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","React Hook useEffect has missing dependencies: 'addUser', 'mode', 'numSuccess', and 'updateUser'. Either include them or remove the dependency array.","ArrayExpression",["292"],"React Hook useEffect has missing dependencies: 'checkHaveCreditSaved' and 'sumOrders'. Either include them or remove the dependency array.",["293"],"React Hook useEffect has missing dependencies: 'checked', 'creditDetail.idCredit', 'creditDetailTemp', 'makePay', and 'numSuccess'. Either include them or remove the dependency array.",["294"],"React Hook useEffect has missing dependencies: 'apdudeAccount' and 'numSuccess'. Either include them or remove the dependency array.",["295"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'checked', 'history', 'numSuccess', 'setUrl', 'shippingDetails.address', 'shippingDetails.buildingNumber', 'shippingDetails.city', 'shippingDetails.homeNumber', 'shippingDetailsTemp', 'updateOrders', and 'updateUser'. Either include them or remove the dependency array.",["296"],"React Hook useEffect has a missing dependency: 'idProduct'. Either include it or remove the dependency array.",["297"],"React Hook useEffect has a missing dependency: 'getTypeOption'. Either include it or remove the dependency array.",["298"],"React Hook useEffect has missing dependencies: 'addProduct', 'idProduct', 'numSuccess', and 'updateProduct'. Either include them or remove the dependency array.",["299"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'categoryShow'. Either include it or remove the dependency array.",["300"],"React Hook useEffect has missing dependencies: 'data', 'type', 'validationFunction', and 'wasSuccess'. Either include them or remove the dependency array.",["301"],"React Hook useEffect has missing dependencies: 'changeUser', 'dataIdPassword', 'history', 'numSuccess', and 'setUrl'. Either include them or remove the dependency array.",["302"],"React Hook useEffect has missing dependencies: 'idRecover' and 'successModal'. Either include them or remove the dependency array.",["303"],"no-unused-vars","'total' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'prevCategory'. Either include it or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["305"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'productDetails._id' and 'type'. Either include them or remove the dependency array.",["306"],"no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},"Update the dependencies array to be: [addUser, mode, numSuccess, sumbit, updateUser]",{"range":"337","text":"338"},"Update the dependencies array to be: [checkHaveCreditSaved, sumOrders, userNow]",{"range":"339","text":"340"},"Update the dependencies array to be: [checked, creditDetail.idCredit, creditDetailTemp, makePay, numSuccess, sumbit]",{"range":"341","text":"342"},"Update the dependencies array to be: [apdudeAccount, numSuccess, sumbit]",{"range":"343","text":"344"},"Update the dependencies array to be: [checked, history, numSuccess, setUrl, shippingDetails.address, shippingDetails.buildingNumber, shippingDetails.city, shippingDetails.homeNumber, shippingDetailsTemp, sumbit, updateOrders, updateUser]",{"range":"345","text":"346"},"Update the dependencies array to be: [idProduct]",{"range":"347","text":"348"},"Update the dependencies array to be: [category, getTypeOption]",{"range":"349","text":"350"},"Update the dependencies array to be: [addProduct, idProduct, numSuccess, sumbit, updateProduct]",{"range":"351","text":"352"},"Update the dependencies array to be: [categoryShow, props.category]",{"range":"353","text":"354"},"Update the dependencies array to be: [data, sumbited, type, validationFunction, wasSuccess]",{"range":"355","text":"356"},"Update the dependencies array to be: [changeUser, dataIdPassword, history, numSuccess, setUrl, sumbit]",{"range":"357","text":"358"},"Update the dependencies array to be: [idRecover, successModal, sumbitModal]",{"range":"359","text":"360"},"Update the dependencies array to be: [category, cities, types, colors, price, quality, skip, prevCategory]",{"range":"361","text":"362"},"Update the dependencies array to be: [props.colors, props.types, props.cities, props.price, props.quality, props]",{"range":"363","text":"364"},"Update the dependencies array to be: [productDetails._id, type]",{"range":"365","text":"366"},[1443,1451],"[addUser, mode, numSuccess, sumbit, updateUser]",[1193,1202],"[checkHaveCreditSaved, sumOrders, userNow]",[2245,2253],"[checked, creditDetail.idCredit, creditDetailTemp, makePay, numSuccess, sumbit]",[1146,1154],"[apdudeAccount, numSuccess, sumbit]",[4723,4731],"[checked, history, numSuccess, setUrl, shippingDetails.address, shippingDetails.buildingNumber, shippingDetails.city, shippingDetails.homeNumber, shippingDetailsTemp, sumbit, updateOrders, updateUser]",[3034,3036],"[idProduct]",[3171,3181],"[category, getTypeOption]",[3666,3674],"[addProduct, idProduct, numSuccess, sumbit, updateProduct]",[2863,2879],"[categoryShow, props.category]",[905,915],"[data, sumbited, type, validationFunction, wasSuccess]",[2312,2320],"[changeUser, dataIdPassword, history, numSuccess, setUrl, sumbit]",[3097,3110],"[idRecover, successModal, sumbitModal]",[2755,2810],"[category, cities, types, colors, price, quality, skip, prevCategory]",[1147,1216],"[props.colors, props.types, props.cities, props.price, props.quality, props]",[2464,2466],"[productDetails._id, type]"]